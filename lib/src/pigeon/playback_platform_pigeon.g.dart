// Autogenerated from Pigeon (v22.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum BufferMode {
  standard,
  fastStartShortForm,
}

enum RepeatMode {
  off,
  one,
}

enum PlaybackState {
  stopped,
  paused,
  playing,
}

enum CastConnectionState {
  none,
  noDevicesAvailable,
  notConnected,
  connecting,
  connected,
}

enum TrackType {
  audio,
  text,
  video,
}

class NpawConfig {
  NpawConfig({
    this.appName,
    this.appReleaseVersion,
    this.accountCode,
    this.deviceIsAnonymous,
  });

  String? appName;

  String? appReleaseVersion;

  String? accountCode;

  bool? deviceIsAnonymous;

  Object encode() {
    return <Object?>[
      appName,
      appReleaseVersion,
      accountCode,
      deviceIsAnonymous,
    ];
  }

  static NpawConfig decode(Object result) {
    result as List<Object?>;
    return NpawConfig(
      appName: result[0] as String?,
      appReleaseVersion: result[1] as String?,
      accountCode: result[2] as String?,
      deviceIsAnonymous: result[3] as bool?,
    );
  }
}

class AppConfig {
  AppConfig({
    this.appLanguage,
    required this.audioLanguages,
    required this.subtitleLanguages,
    this.analyticsId,
    this.sessionId,
  });

  String? appLanguage;

  List<String?> audioLanguages;

  List<String?> subtitleLanguages;

  String? analyticsId;

  int? sessionId;

  Object encode() {
    return <Object?>[
      appLanguage,
      audioLanguages,
      subtitleLanguages,
      analyticsId,
      sessionId,
    ];
  }

  static AppConfig decode(Object result) {
    result as List<Object?>;
    return AppConfig(
      appLanguage: result[0] as String?,
      audioLanguages: (result[1] as List<Object?>?)!.cast<String?>(),
      subtitleLanguages: (result[2] as List<Object?>?)!.cast<String?>(),
      analyticsId: result[3] as String?,
      sessionId: result[4] as int?,
    );
  }
}

class User {
  User({
    this.id,
  });

  String? id;

  Object encode() {
    return <Object?>[
      id,
    ];
  }

  static User decode(Object result) {
    result as List<Object?>;
    return User(
      id: result[0] as String?,
    );
  }
}

class SetUrlArgs {
  SetUrlArgs({
    required this.playerId,
    required this.url,
    this.isLive,
  });

  String playerId;

  String url;

  bool? isLive;

  Object encode() {
    return <Object?>[
      playerId,
      url,
      isLive,
    ];
  }

  static SetUrlArgs decode(Object result) {
    result as List<Object?>;
    return SetUrlArgs(
      playerId: result[0]! as String,
      url: result[1]! as String,
      isLive: result[2] as bool?,
    );
  }
}

class MediaItem {
  MediaItem({
    this.id,
    this.url,
    this.mimeType,
    this.metadata,
    this.isLive,
    this.isOffline,
    this.playbackStartPositionMs,
    this.lastKnownAudioLanguage,
    this.lastKnownSubtitleLanguage,
  });

  String? id;

  String? url;

  String? mimeType;

  MediaMetadata? metadata;

  bool? isLive;

  bool? isOffline;

  double? playbackStartPositionMs;

  String? lastKnownAudioLanguage;

  String? lastKnownSubtitleLanguage;

  Object encode() {
    return <Object?>[
      id,
      url,
      mimeType,
      metadata,
      isLive,
      isOffline,
      playbackStartPositionMs,
      lastKnownAudioLanguage,
      lastKnownSubtitleLanguage,
    ];
  }

  static MediaItem decode(Object result) {
    result as List<Object?>;
    return MediaItem(
      id: result[0] as String?,
      url: result[1] as String?,
      mimeType: result[2] as String?,
      metadata: result[3] as MediaMetadata?,
      isLive: result[4] as bool?,
      isOffline: result[5] as bool?,
      playbackStartPositionMs: result[6] as double?,
      lastKnownAudioLanguage: result[7] as String?,
      lastKnownSubtitleLanguage: result[8] as String?,
    );
  }
}

class MediaMetadata {
  MediaMetadata({
    this.artworkUri,
    this.title,
    this.artist,
    this.durationMs,
    this.extras,
  });

  String? artworkUri;

  String? title;

  String? artist;

  double? durationMs;

  Map<String?, String?>? extras;

  Object encode() {
    return <Object?>[
      artworkUri,
      title,
      artist,
      durationMs,
      extras,
    ];
  }

  static MediaMetadata decode(Object result) {
    result as List<Object?>;
    return MediaMetadata(
      artworkUri: result[0] as String?,
      title: result[1] as String?,
      artist: result[2] as String?,
      durationMs: result[3] as double?,
      extras: (result[4] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class PlayerStateSnapshot {
  PlayerStateSnapshot({
    required this.playerId,
    required this.playbackState,
    required this.isBuffering,
    required this.isFullscreen,
    required this.playbackSpeed,
    this.videoSize,
    this.currentMediaItem,
    this.playbackPositionMs,
    this.textureId,
    this.volume,
    this.error,
  });

  String playerId;

  PlaybackState playbackState;

  bool isBuffering;

  bool isFullscreen;

  double playbackSpeed;

  VideoSize? videoSize;

  MediaItem? currentMediaItem;

  double? playbackPositionMs;

  int? textureId;

  double? volume;

  PlayerError? error;

  Object encode() {
    return <Object?>[
      playerId,
      playbackState,
      isBuffering,
      isFullscreen,
      playbackSpeed,
      videoSize,
      currentMediaItem,
      playbackPositionMs,
      textureId,
      volume,
      error,
    ];
  }

  static PlayerStateSnapshot decode(Object result) {
    result as List<Object?>;
    return PlayerStateSnapshot(
      playerId: result[0]! as String,
      playbackState: result[1]! as PlaybackState,
      isBuffering: result[2]! as bool,
      isFullscreen: result[3]! as bool,
      playbackSpeed: result[4]! as double,
      videoSize: result[5] as VideoSize?,
      currentMediaItem: result[6] as MediaItem?,
      playbackPositionMs: result[7] as double?,
      textureId: result[8] as int?,
      volume: result[9] as double?,
      error: result[10] as PlayerError?,
    );
  }
}

class PlayerError {
  PlayerError({
    this.code,
    this.message,
  });

  String? code;

  String? message;

  Object encode() {
    return <Object?>[
      code,
      message,
    ];
  }

  static PlayerError decode(Object result) {
    result as List<Object?>;
    return PlayerError(
      code: result[0] as String?,
      message: result[1] as String?,
    );
  }
}

class VideoSize {
  VideoSize({
    required this.width,
    required this.height,
  });

  int width;

  int height;

  Object encode() {
    return <Object?>[
      width,
      height,
    ];
  }

  static VideoSize decode(Object result) {
    result as List<Object?>;
    return VideoSize(
      width: result[0]! as int,
      height: result[1]! as int,
    );
  }
}

class ChromecastState {
  ChromecastState({
    required this.connectionState,
    this.mediaItem,
  });

  CastConnectionState connectionState;

  MediaItem? mediaItem;

  Object encode() {
    return <Object?>[
      connectionState,
      mediaItem,
    ];
  }

  static ChromecastState decode(Object result) {
    result as List<Object?>;
    return ChromecastState(
      connectionState: result[0]! as CastConnectionState,
      mediaItem: result[1] as MediaItem?,
    );
  }
}

class MediaInfo {
  MediaInfo({
    required this.audioTracks,
    required this.textTracks,
    required this.videoTracks,
  });

  List<Track?> audioTracks;

  List<Track?> textTracks;

  List<Track?> videoTracks;

  Object encode() {
    return <Object?>[
      audioTracks,
      textTracks,
      videoTracks,
    ];
  }

  static MediaInfo decode(Object result) {
    result as List<Object?>;
    return MediaInfo(
      audioTracks: (result[0] as List<Object?>?)!.cast<Track?>(),
      textTracks: (result[1] as List<Object?>?)!.cast<Track?>(),
      videoTracks: (result[2] as List<Object?>?)!.cast<Track?>(),
    );
  }
}

class PlayerTracksSnapshot {
  PlayerTracksSnapshot({
    required this.playerId,
    required this.audioTracks,
    required this.textTracks,
    required this.videoTracks,
  });

  String playerId;

  List<Track?> audioTracks;

  List<Track?> textTracks;

  List<Track?> videoTracks;

  Object encode() {
    return <Object?>[
      playerId,
      audioTracks,
      textTracks,
      videoTracks,
    ];
  }

  static PlayerTracksSnapshot decode(Object result) {
    result as List<Object?>;
    return PlayerTracksSnapshot(
      playerId: result[0]! as String,
      audioTracks: (result[1] as List<Object?>?)!.cast<Track?>(),
      textTracks: (result[2] as List<Object?>?)!.cast<Track?>(),
      videoTracks: (result[3] as List<Object?>?)!.cast<Track?>(),
    );
  }
}

class Track {
  Track({
    required this.id,
    this.label,
    this.language,
    this.frameRate,
    this.bitrate,
    this.width,
    this.height,
    this.downloaded,
    required this.isSelected,
  });

  String id;

  String? label;

  String? language;

  double? frameRate;

  int? bitrate;

  int? width;

  int? height;

  bool? downloaded;

  bool isSelected;

  Object encode() {
    return <Object?>[
      id,
      label,
      language,
      frameRate,
      bitrate,
      width,
      height,
      downloaded,
      isSelected,
    ];
  }

  static Track decode(Object result) {
    result as List<Object?>;
    return Track(
      id: result[0]! as String,
      label: result[1] as String?,
      language: result[2] as String?,
      frameRate: result[3] as double?,
      bitrate: result[4] as int?,
      width: result[5] as int?,
      height: result[6] as int?,
      downloaded: result[7] as bool?,
      isSelected: result[8]! as bool,
    );
  }
}

class PrimaryPlayerChangedEvent {
  PrimaryPlayerChangedEvent({
    this.playerId,
  });

  String? playerId;

  Object encode() {
    return <Object?>[
      playerId,
    ];
  }

  static PrimaryPlayerChangedEvent decode(Object result) {
    result as List<Object?>;
    return PrimaryPlayerChangedEvent(
      playerId: result[0] as String?,
    );
  }
}

class PlayerStateUpdateEvent {
  PlayerStateUpdateEvent({
    required this.playerId,
    required this.snapshot,
  });

  String playerId;

  PlayerStateSnapshot snapshot;

  Object encode() {
    return <Object?>[
      playerId,
      snapshot,
    ];
  }

  static PlayerStateUpdateEvent decode(Object result) {
    result as List<Object?>;
    return PlayerStateUpdateEvent(
      playerId: result[0]! as String,
      snapshot: result[1]! as PlayerStateSnapshot,
    );
  }
}

class PositionDiscontinuityEvent {
  PositionDiscontinuityEvent({
    required this.playerId,
    this.playbackPositionMs,
  });

  String playerId;

  double? playbackPositionMs;

  Object encode() {
    return <Object?>[
      playerId,
      playbackPositionMs,
    ];
  }

  static PositionDiscontinuityEvent decode(Object result) {
    result as List<Object?>;
    return PositionDiscontinuityEvent(
      playerId: result[0]! as String,
      playbackPositionMs: result[1] as double?,
    );
  }
}

class PlaybackStateChangedEvent {
  PlaybackStateChangedEvent({
    required this.playerId,
    required this.playbackState,
    required this.isBuffering,
  });

  String playerId;

  PlaybackState playbackState;

  bool isBuffering;

  Object encode() {
    return <Object?>[
      playerId,
      playbackState,
      isBuffering,
    ];
  }

  static PlaybackStateChangedEvent decode(Object result) {
    result as List<Object?>;
    return PlaybackStateChangedEvent(
      playerId: result[0]! as String,
      playbackState: result[1]! as PlaybackState,
      isBuffering: result[2]! as bool,
    );
  }
}

class PlaybackEndedEvent {
  PlaybackEndedEvent({
    required this.playerId,
    this.mediaItem,
  });

  String playerId;

  MediaItem? mediaItem;

  Object encode() {
    return <Object?>[
      playerId,
      mediaItem,
    ];
  }

  static PlaybackEndedEvent decode(Object result) {
    result as List<Object?>;
    return PlaybackEndedEvent(
      playerId: result[0]! as String,
      mediaItem: result[1] as MediaItem?,
    );
  }
}

class PictureInPictureModeChangedEvent {
  PictureInPictureModeChangedEvent({
    required this.playerId,
    required this.isInPipMode,
  });

  String playerId;

  bool isInPipMode;

  Object encode() {
    return <Object?>[
      playerId,
      isInPipMode,
    ];
  }

  static PictureInPictureModeChangedEvent decode(Object result) {
    result as List<Object?>;
    return PictureInPictureModeChangedEvent(
      playerId: result[0]! as String,
      isInPipMode: result[1]! as bool,
    );
  }
}

class MediaItemTransitionEvent {
  MediaItemTransitionEvent({
    required this.playerId,
    this.mediaItem,
  });

  String playerId;

  MediaItem? mediaItem;

  Object encode() {
    return <Object?>[
      playerId,
      mediaItem,
    ];
  }

  static MediaItemTransitionEvent decode(Object result) {
    result as List<Object?>;
    return MediaItemTransitionEvent(
      playerId: result[0]! as String,
      mediaItem: result[1] as MediaItem?,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is BufferMode) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is RepeatMode) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is PlaybackState) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is CastConnectionState) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is TrackType) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is NpawConfig) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is AppConfig) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is User) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is SetUrlArgs) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is MediaItem) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is MediaMetadata) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is PlayerStateSnapshot) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is PlayerError) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    }    else if (value is VideoSize) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    }    else if (value is ChromecastState) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    }    else if (value is MediaInfo) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    }    else if (value is PlayerTracksSnapshot) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    }    else if (value is Track) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    }    else if (value is PrimaryPlayerChangedEvent) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    }    else if (value is PlayerStateUpdateEvent) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    }    else if (value is PositionDiscontinuityEvent) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    }    else if (value is PlaybackStateChangedEvent) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    }    else if (value is PlaybackEndedEvent) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    }    else if (value is PictureInPictureModeChangedEvent) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    }    else if (value is MediaItemTransitionEvent) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : BufferMode.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : RepeatMode.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PlaybackState.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CastConnectionState.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : TrackType.values[value];
      case 134: 
        return NpawConfig.decode(readValue(buffer)!);
      case 135: 
        return AppConfig.decode(readValue(buffer)!);
      case 136: 
        return User.decode(readValue(buffer)!);
      case 137: 
        return SetUrlArgs.decode(readValue(buffer)!);
      case 138: 
        return MediaItem.decode(readValue(buffer)!);
      case 139: 
        return MediaMetadata.decode(readValue(buffer)!);
      case 140: 
        return PlayerStateSnapshot.decode(readValue(buffer)!);
      case 141: 
        return PlayerError.decode(readValue(buffer)!);
      case 142: 
        return VideoSize.decode(readValue(buffer)!);
      case 143: 
        return ChromecastState.decode(readValue(buffer)!);
      case 144: 
        return MediaInfo.decode(readValue(buffer)!);
      case 145: 
        return PlayerTracksSnapshot.decode(readValue(buffer)!);
      case 146: 
        return Track.decode(readValue(buffer)!);
      case 147: 
        return PrimaryPlayerChangedEvent.decode(readValue(buffer)!);
      case 148: 
        return PlayerStateUpdateEvent.decode(readValue(buffer)!);
      case 149: 
        return PositionDiscontinuityEvent.decode(readValue(buffer)!);
      case 150: 
        return PlaybackStateChangedEvent.decode(readValue(buffer)!);
      case 151: 
        return PlaybackEndedEvent.decode(readValue(buffer)!);
      case 152: 
        return PictureInPictureModeChangedEvent.decode(readValue(buffer)!);
      case 153: 
        return MediaItemTransitionEvent.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// The main interface, used by the flutter side to control the player.
class PlaybackPlatformPigeon {
  /// Constructor for [PlaybackPlatformPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PlaybackPlatformPigeon({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> attach() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.attach$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> newPlayer(BufferMode? bufferMode, bool? disableNpaw) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.newPlayer$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[bufferMode, disableNpaw]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<int> createVideoTexture() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.createVideoTexture$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  Future<bool> disposeVideoTexture(int textureId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.disposeVideoTexture$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[textureId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<int> switchToVideoTexture(String playerId, int textureId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.switchToVideoTexture$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId, textureId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  Future<bool> disposePlayer(String playerId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.disposePlayer$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> replaceCurrentMediaItem(String playerId, MediaItem mediaItem, bool? playbackPositionFromPrimary, bool? autoplay) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.replaceCurrentMediaItem$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId, mediaItem, playbackPositionFromPrimary, autoplay]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setPlayerViewVisibility(int viewId, bool visible) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPlayerViewVisibility$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[viewId, visible]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setPrimary(String id) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPrimary$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[id]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> play(String playerId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.play$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> seekTo(String playerId, double positionMs) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.seekTo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId, positionMs]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pause(String playerId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.pause$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stop(String playerId, bool reset) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.stop$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId, reset]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setVolume(String playerId, double volume) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setVolume$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId, volume]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setRepeatMode(String playerId, RepeatMode repeatMode) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setRepeatMode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId, repeatMode]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setSelectedTrack(String playerId, TrackType type, String? trackId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setSelectedTrack$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId, type, trackId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setPlaybackSpeed(String playerId, double speed) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPlaybackSpeed$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId, speed]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> exitFullscreen(String playerId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.exitFullscreen$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> enterFullscreen(String playerId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.enterFullscreen$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMixWithOthers(String playerId, bool mixWithOthers) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setMixWithOthers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId, mixWithOthers]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setNpawConfig(NpawConfig? config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setNpawConfig$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setAppConfig(AppConfig? config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setAppConfig$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PlayerTracksSnapshot?> getTracks(String? playerId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getTracks$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PlayerTracksSnapshot?);
    }
  }

  Future<PlayerStateSnapshot?> getPlayerState(String? playerId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getPlayerState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[playerId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PlayerStateSnapshot?);
    }
  }

  Future<ChromecastState?> getChromecastState() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getChromecastState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as ChromecastState?);
    }
  }

  Future<void> openExpandedCastController() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.openExpandedCastController$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> openCastDialog() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.openCastDialog$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<MediaInfo> fetchMediaInfo(String url, String? mimeType) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.fetchMediaInfo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[url, mimeType]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MediaInfo?)!;
    }
  }

  Future<int> getAndroidPerformanceClass() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getAndroidPerformanceClass$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }
}

abstract class QueueManagerPigeon {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  Future<void> handlePlaybackEnded(String playerId, MediaItem? current);

  Future<void> skipToNext(String playerId);

  Future<void> skipToPrevious(String playerId);

  static void setUp(QueueManagerPigeon? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.QueueManagerPigeon.handlePlaybackEnded$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.QueueManagerPigeon.handlePlaybackEnded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.bccm_player.QueueManagerPigeon.handlePlaybackEnded was null, expected non-null String.');
          final MediaItem? arg_current = (args[1] as MediaItem?);
          try {
            await api.handlePlaybackEnded(arg_playerId!, arg_current);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.QueueManagerPigeon.skipToNext$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.QueueManagerPigeon.skipToNext was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.bccm_player.QueueManagerPigeon.skipToNext was null, expected non-null String.');
          try {
            await api.skipToNext(arg_playerId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.QueueManagerPigeon.skipToPrevious$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.QueueManagerPigeon.skipToPrevious was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_playerId = (args[0] as String?);
          assert(arg_playerId != null,
              'Argument for dev.flutter.pigeon.bccm_player.QueueManagerPigeon.skipToPrevious was null, expected non-null String.');
          try {
            await api.skipToPrevious(arg_playerId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

////////////////// Playback Listener
abstract class PlaybackListenerPigeon {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onPrimaryPlayerChanged(PrimaryPlayerChangedEvent event);

  void onPositionDiscontinuity(PositionDiscontinuityEvent event);

  void onPlayerStateUpdate(PlayerStateUpdateEvent event);

  void onPlaybackStateChanged(PlaybackStateChangedEvent event);

  void onPlaybackEnded(PlaybackEndedEvent event);

  void onMediaItemTransition(MediaItemTransitionEvent event);

  void onPictureInPictureModeChanged(PictureInPictureModeChangedEvent event);

  static void setUp(PlaybackListenerPigeon? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPrimaryPlayerChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPrimaryPlayerChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PrimaryPlayerChangedEvent? arg_event = (args[0] as PrimaryPlayerChangedEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPrimaryPlayerChanged was null, expected non-null PrimaryPlayerChangedEvent.');
          try {
            api.onPrimaryPlayerChanged(arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPositionDiscontinuity$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPositionDiscontinuity was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PositionDiscontinuityEvent? arg_event = (args[0] as PositionDiscontinuityEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPositionDiscontinuity was null, expected non-null PositionDiscontinuityEvent.');
          try {
            api.onPositionDiscontinuity(arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlayerStateUpdate$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlayerStateUpdate was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PlayerStateUpdateEvent? arg_event = (args[0] as PlayerStateUpdateEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlayerStateUpdate was null, expected non-null PlayerStateUpdateEvent.');
          try {
            api.onPlayerStateUpdate(arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PlaybackStateChangedEvent? arg_event = (args[0] as PlaybackStateChangedEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackStateChanged was null, expected non-null PlaybackStateChangedEvent.');
          try {
            api.onPlaybackStateChanged(arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackEnded$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackEnded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PlaybackEndedEvent? arg_event = (args[0] as PlaybackEndedEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackEnded was null, expected non-null PlaybackEndedEvent.');
          try {
            api.onPlaybackEnded(arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onMediaItemTransition$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onMediaItemTransition was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MediaItemTransitionEvent? arg_event = (args[0] as MediaItemTransitionEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onMediaItemTransition was null, expected non-null MediaItemTransitionEvent.');
          try {
            api.onMediaItemTransition(arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPictureInPictureModeChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPictureInPictureModeChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PictureInPictureModeChangedEvent? arg_event = (args[0] as PictureInPictureModeChangedEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPictureInPictureModeChanged was null, expected non-null PictureInPictureModeChangedEvent.');
          try {
            api.onPictureInPictureModeChanged(arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
