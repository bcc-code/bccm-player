// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum DownloadStatus: Int {
  case downloading = 0
  case paused = 1
  case finished = 2
  case failed = 3
  case queued = 4
  case removing = 5
}

/// Generated class from Pigeon that represents data sent in messages.
struct DownloadConfig {
  var url: String
  var mimeType: String
  var title: String
  var audioTrackIds: [String?]
  var videoTrackIds: [String?]
  var additionalData: [String?: String?]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> DownloadConfig? {
    let url = pigeonVar_list[0] as! String
    let mimeType = pigeonVar_list[1] as! String
    let title = pigeonVar_list[2] as! String
    let audioTrackIds = pigeonVar_list[3] as! [String?]
    let videoTrackIds = pigeonVar_list[4] as! [String?]
    let additionalData = pigeonVar_list[5] as! [String?: String?]

    return DownloadConfig(
      url: url,
      mimeType: mimeType,
      title: title,
      audioTrackIds: audioTrackIds,
      videoTrackIds: videoTrackIds,
      additionalData: additionalData
    )
  }
  func toList() -> [Any?] {
    return [
      url,
      mimeType,
      title,
      audioTrackIds,
      videoTrackIds,
      additionalData,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Download {
  var key: String
  var config: DownloadConfig
  var offlineUrl: String? = nil
  var fractionDownloaded: Double
  var status: DownloadStatus
  var error: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Download? {
    let key = pigeonVar_list[0] as! String
    let config = pigeonVar_list[1] as! DownloadConfig
    let offlineUrl: String? = nilOrValue(pigeonVar_list[2])
    let fractionDownloaded = pigeonVar_list[3] as! Double
    let status = pigeonVar_list[4] as! DownloadStatus
    let error: String? = nilOrValue(pigeonVar_list[5])

    return Download(
      key: key,
      config: config,
      offlineUrl: offlineUrl,
      fractionDownloaded: fractionDownloaded,
      status: status,
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      config,
      offlineUrl,
      fractionDownloaded,
      status,
      error,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DownloadFailedEvent {
  var key: String
  var error: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> DownloadFailedEvent? {
    let key = pigeonVar_list[0] as! String
    let error: String? = nilOrValue(pigeonVar_list[1])

    return DownloadFailedEvent(
      key: key,
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      error,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DownloadRemovedEvent {
  var key: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> DownloadRemovedEvent? {
    let key = pigeonVar_list[0] as! String

    return DownloadRemovedEvent(
      key: key
    )
  }
  func toList() -> [Any?] {
    return [
      key
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DownloadChangedEvent {
  var download: Download


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> DownloadChangedEvent? {
    let download = pigeonVar_list[0] as! Download

    return DownloadChangedEvent(
      download: download
    )
  }
  func toList() -> [Any?] {
    return [
      download
    ]
  }
}

private class DownloaderApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return DownloadStatus(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return DownloadConfig.fromList(self.readValue() as! [Any?])
    case 131:
      return Download.fromList(self.readValue() as! [Any?])
    case 132:
      return DownloadFailedEvent.fromList(self.readValue() as! [Any?])
    case 133:
      return DownloadRemovedEvent.fromList(self.readValue() as! [Any?])
    case 134:
      return DownloadChangedEvent.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class DownloaderApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? DownloadStatus {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? DownloadConfig {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? Download {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? DownloadFailedEvent {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? DownloadRemovedEvent {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? DownloadChangedEvent {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class DownloaderApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return DownloaderApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return DownloaderApiPigeonCodecWriter(data: data)
  }
}

class DownloaderApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = DownloaderApiPigeonCodec(readerWriter: DownloaderApiPigeonCodecReaderWriter())
}


/// An API called by the native side to notify about chromecast changes
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol DownloaderPigeon {
  func startDownload(downloadConfig: DownloadConfig, completion: @escaping (Result<Download, Error>) -> Void)
  func getDownloadStatus(downloadKey: String, completion: @escaping (Result<Double, Error>) -> Void)
  func getDownloads(completion: @escaping (Result<[Download], Error>) -> Void)
  func getDownload(downloadKey: String, completion: @escaping (Result<Download?, Error>) -> Void)
  func removeDownload(downloadKey: String, completion: @escaping (Result<Void, Error>) -> Void)
  /// Returns free space in bytes
  func getFreeDiskSpace(completion: @escaping (Result<Double, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class DownloaderPigeonSetup {
  static var codec: FlutterStandardMessageCodec { DownloaderApiPigeonCodec.shared }
  /// Sets up an instance of `DownloaderPigeon` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: DownloaderPigeon?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let startDownloadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderPigeon.startDownload\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startDownloadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let downloadConfigArg = args[0] as! DownloadConfig
        api.startDownload(downloadConfig: downloadConfigArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startDownloadChannel.setMessageHandler(nil)
    }
    let getDownloadStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownloadStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDownloadStatusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let downloadKeyArg = args[0] as! String
        api.getDownloadStatus(downloadKey: downloadKeyArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getDownloadStatusChannel.setMessageHandler(nil)
    }
    let getDownloadsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownloads\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDownloadsChannel.setMessageHandler { _, reply in
        api.getDownloads { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getDownloadsChannel.setMessageHandler(nil)
    }
    let getDownloadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownload\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDownloadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let downloadKeyArg = args[0] as! String
        api.getDownload(downloadKey: downloadKeyArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getDownloadChannel.setMessageHandler(nil)
    }
    let removeDownloadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderPigeon.removeDownload\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeDownloadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let downloadKeyArg = args[0] as! String
        api.removeDownload(downloadKey: downloadKeyArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      removeDownloadChannel.setMessageHandler(nil)
    }
    /// Returns free space in bytes
    let getFreeDiskSpaceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getFreeDiskSpace\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getFreeDiskSpaceChannel.setMessageHandler { _, reply in
        api.getFreeDiskSpace { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getFreeDiskSpaceChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol DownloaderListenerPigeonProtocol {
  func onDownloadStatusChanged(event eventArg: DownloadChangedEvent, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onDownloadRemoved(event eventArg: DownloadRemovedEvent, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onDownloadFailed(event eventArg: DownloadFailedEvent, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class DownloaderListenerPigeon: DownloaderListenerPigeonProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: DownloaderApiPigeonCodec {
    return DownloaderApiPigeonCodec.shared
  }
  func onDownloadStatusChanged(event eventArg: DownloadChangedEvent, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.bccm_player.DownloaderListenerPigeon.onDownloadStatusChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([eventArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onDownloadRemoved(event eventArg: DownloadRemovedEvent, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.bccm_player.DownloaderListenerPigeon.onDownloadRemoved\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([eventArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onDownloadFailed(event eventArg: DownloadFailedEvent, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.bccm_player.DownloaderListenerPigeon.onDownloadFailed\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([eventArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
