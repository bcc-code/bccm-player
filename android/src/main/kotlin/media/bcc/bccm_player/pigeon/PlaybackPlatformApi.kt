// Autogenerated from Pigeon (v20.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package media.bcc.bccm_player.pigeon.playback

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class BufferMode(val raw: Int) {
  STANDARD(0),
  FAST_START_SHORT_FORM(1);

  companion object {
    fun ofRaw(raw: Int): BufferMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class RepeatMode(val raw: Int) {
  OFF(0),
  ONE(1);

  companion object {
    fun ofRaw(raw: Int): RepeatMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PlaybackState(val raw: Int) {
  STOPPED(0),
  PAUSED(1),
  PLAYING(2);

  companion object {
    fun ofRaw(raw: Int): PlaybackState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CastConnectionState(val raw: Int) {
  NONE(0),
  NO_DEVICES_AVAILABLE(1),
  NOT_CONNECTED(2),
  CONNECTING(3),
  CONNECTED(4);

  companion object {
    fun ofRaw(raw: Int): CastConnectionState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TrackType(val raw: Int) {
  AUDIO(0),
  TEXT(1),
  VIDEO(2);

  companion object {
    fun ofRaw(raw: Int): TrackType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NpawConfig (
  val appName: String? = null,
  val appReleaseVersion: String? = null,
  val accountCode: String? = null,
  val deviceIsAnonymous: Boolean? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): NpawConfig {
      val appName = __pigeon_list[0] as String?
      val appReleaseVersion = __pigeon_list[1] as String?
      val accountCode = __pigeon_list[2] as String?
      val deviceIsAnonymous = __pigeon_list[3] as Boolean?
      return NpawConfig(appName, appReleaseVersion, accountCode, deviceIsAnonymous)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      appName,
      appReleaseVersion,
      accountCode,
      deviceIsAnonymous,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AppConfig (
  val appLanguage: String? = null,
  val audioLanguages: List<String?>,
  val subtitleLanguages: List<String?>,
  val analyticsId: String? = null,
  val sessionId: Long? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): AppConfig {
      val appLanguage = __pigeon_list[0] as String?
      val audioLanguages = __pigeon_list[1] as List<String?>
      val subtitleLanguages = __pigeon_list[2] as List<String?>
      val analyticsId = __pigeon_list[3] as String?
      val sessionId = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long? }
      return AppConfig(appLanguage, audioLanguages, subtitleLanguages, analyticsId, sessionId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      appLanguage,
      audioLanguages,
      subtitleLanguages,
      analyticsId,
      sessionId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MediaItem (
  val url: String? = null,
  val mimeType: String? = null,
  val metadata: MediaMetadata? = null,
  val isLive: Boolean? = null,
  val isOffline: Boolean? = null,
  val playbackStartPositionMs: Double? = null,
  val lastKnownAudioLanguage: String? = null,
  val lastKnownSubtitleLanguage: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): MediaItem {
      val url = __pigeon_list[0] as String?
      val mimeType = __pigeon_list[1] as String?
      val metadata = __pigeon_list[2] as MediaMetadata?
      val isLive = __pigeon_list[3] as Boolean?
      val isOffline = __pigeon_list[4] as Boolean?
      val playbackStartPositionMs = __pigeon_list[5] as Double?
      val lastKnownAudioLanguage = __pigeon_list[6] as String?
      val lastKnownSubtitleLanguage = __pigeon_list[7] as String?
      return MediaItem(url, mimeType, metadata, isLive, isOffline, playbackStartPositionMs, lastKnownAudioLanguage, lastKnownSubtitleLanguage)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      url,
      mimeType,
      metadata,
      isLive,
      isOffline,
      playbackStartPositionMs,
      lastKnownAudioLanguage,
      lastKnownSubtitleLanguage,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MediaMetadata (
  val artworkUri: String? = null,
  val title: String? = null,
  val artist: String? = null,
  val durationMs: Double? = null,
  val extras: Map<String?, String?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): MediaMetadata {
      val artworkUri = __pigeon_list[0] as String?
      val title = __pigeon_list[1] as String?
      val artist = __pigeon_list[2] as String?
      val durationMs = __pigeon_list[3] as Double?
      val extras = __pigeon_list[4] as Map<String?, String?>?
      return MediaMetadata(artworkUri, title, artist, durationMs, extras)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      artworkUri,
      title,
      artist,
      durationMs,
      extras,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlayerStateSnapshot (
  val playerId: String,
  val playbackState: PlaybackState,
  val isBuffering: Boolean,
  val isFullscreen: Boolean,
  val playbackSpeed: Double,
  val videoSize: VideoSize? = null,
  val currentMediaItem: MediaItem? = null,
  val playbackPositionMs: Double? = null,
  val textureId: Long? = null,
  val volume: Double? = null,
  val error: PlayerError? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PlayerStateSnapshot {
      val playerId = __pigeon_list[0] as String
      val playbackState = __pigeon_list[1] as PlaybackState
      val isBuffering = __pigeon_list[2] as Boolean
      val isFullscreen = __pigeon_list[3] as Boolean
      val playbackSpeed = __pigeon_list[4] as Double
      val videoSize = __pigeon_list[5] as VideoSize?
      val currentMediaItem = __pigeon_list[6] as MediaItem?
      val playbackPositionMs = __pigeon_list[7] as Double?
      val textureId = __pigeon_list[8].let { num -> if (num is Int) num.toLong() else num as Long? }
      val volume = __pigeon_list[9] as Double?
      val error = __pigeon_list[10] as PlayerError?
      return PlayerStateSnapshot(playerId, playbackState, isBuffering, isFullscreen, playbackSpeed, videoSize, currentMediaItem, playbackPositionMs, textureId, volume, error)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      playerId,
      playbackState,
      isBuffering,
      isFullscreen,
      playbackSpeed,
      videoSize,
      currentMediaItem,
      playbackPositionMs,
      textureId,
      volume,
      error,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlayerError (
  val code: String? = null,
  val message: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PlayerError {
      val code = __pigeon_list[0] as String?
      val message = __pigeon_list[1] as String?
      return PlayerError(code, message)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      code,
      message,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class VideoSize (
  val width: Long,
  val height: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): VideoSize {
      val width = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val height = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      return VideoSize(width, height)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      width,
      height,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ChromecastState (
  val connectionState: CastConnectionState,
  val mediaItem: MediaItem? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): ChromecastState {
      val connectionState = __pigeon_list[0] as CastConnectionState
      val mediaItem = __pigeon_list[1] as MediaItem?
      return ChromecastState(connectionState, mediaItem)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      connectionState,
      mediaItem,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MediaInfo (
  val audioTracks: List<Track?>,
  val textTracks: List<Track?>,
  val videoTracks: List<Track?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): MediaInfo {
      val audioTracks = __pigeon_list[0] as List<Track?>
      val textTracks = __pigeon_list[1] as List<Track?>
      val videoTracks = __pigeon_list[2] as List<Track?>
      return MediaInfo(audioTracks, textTracks, videoTracks)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      audioTracks,
      textTracks,
      videoTracks,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlayerTracksSnapshot (
  val playerId: String,
  val audioTracks: List<Track?>,
  val textTracks: List<Track?>,
  val videoTracks: List<Track?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PlayerTracksSnapshot {
      val playerId = __pigeon_list[0] as String
      val audioTracks = __pigeon_list[1] as List<Track?>
      val textTracks = __pigeon_list[2] as List<Track?>
      val videoTracks = __pigeon_list[3] as List<Track?>
      return PlayerTracksSnapshot(playerId, audioTracks, textTracks, videoTracks)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      playerId,
      audioTracks,
      textTracks,
      videoTracks,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Track (
  val id: String,
  val label: String? = null,
  val language: String? = null,
  val frameRate: Double? = null,
  val bitrate: Long? = null,
  val width: Long? = null,
  val height: Long? = null,
  val downloaded: Boolean? = null,
  val isSelected: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): Track {
      val id = __pigeon_list[0] as String
      val label = __pigeon_list[1] as String?
      val language = __pigeon_list[2] as String?
      val frameRate = __pigeon_list[3] as Double?
      val bitrate = __pigeon_list[4].let { num -> if (num is Int) num.toLong() else num as Long? }
      val width = __pigeon_list[5].let { num -> if (num is Int) num.toLong() else num as Long? }
      val height = __pigeon_list[6].let { num -> if (num is Int) num.toLong() else num as Long? }
      val downloaded = __pigeon_list[7] as Boolean?
      val isSelected = __pigeon_list[8] as Boolean
      return Track(id, label, language, frameRate, bitrate, width, height, downloaded, isSelected)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      label,
      language,
      frameRate,
      bitrate,
      width,
      height,
      downloaded,
      isSelected,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PrimaryPlayerChangedEvent (
  val playerId: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PrimaryPlayerChangedEvent {
      val playerId = __pigeon_list[0] as String?
      return PrimaryPlayerChangedEvent(playerId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      playerId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlayerStateUpdateEvent (
  val playerId: String,
  val snapshot: PlayerStateSnapshot

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PlayerStateUpdateEvent {
      val playerId = __pigeon_list[0] as String
      val snapshot = __pigeon_list[1] as PlayerStateSnapshot
      return PlayerStateUpdateEvent(playerId, snapshot)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      playerId,
      snapshot,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PositionDiscontinuityEvent (
  val playerId: String,
  val playbackPositionMs: Double? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PositionDiscontinuityEvent {
      val playerId = __pigeon_list[0] as String
      val playbackPositionMs = __pigeon_list[1] as Double?
      return PositionDiscontinuityEvent(playerId, playbackPositionMs)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      playerId,
      playbackPositionMs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlaybackStateChangedEvent (
  val playerId: String,
  val playbackState: PlaybackState,
  val isBuffering: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PlaybackStateChangedEvent {
      val playerId = __pigeon_list[0] as String
      val playbackState = __pigeon_list[1] as PlaybackState
      val isBuffering = __pigeon_list[2] as Boolean
      return PlaybackStateChangedEvent(playerId, playbackState, isBuffering)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      playerId,
      playbackState,
      isBuffering,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlaybackEndedEvent (
  val playerId: String,
  val mediaItem: MediaItem? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PlaybackEndedEvent {
      val playerId = __pigeon_list[0] as String
      val mediaItem = __pigeon_list[1] as MediaItem?
      return PlaybackEndedEvent(playerId, mediaItem)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      playerId,
      mediaItem,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PictureInPictureModeChangedEvent (
  val playerId: String,
  val isInPipMode: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PictureInPictureModeChangedEvent {
      val playerId = __pigeon_list[0] as String
      val isInPipMode = __pigeon_list[1] as Boolean
      return PictureInPictureModeChangedEvent(playerId, isInPipMode)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      playerId,
      isInPipMode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MediaItemTransitionEvent (
  val playerId: String,
  val mediaItem: MediaItem? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): MediaItemTransitionEvent {
      val playerId = __pigeon_list[0] as String
      val mediaItem = __pigeon_list[1] as MediaItem?
      return MediaItemTransitionEvent(playerId, mediaItem)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      playerId,
      mediaItem,
    )
  }
}
private object PlaybackPlatformApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NpawConfig.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AppConfig.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MediaItem.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MediaMetadata.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlayerStateSnapshot.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlayerError.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          VideoSize.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ChromecastState.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MediaInfo.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlayerTracksSnapshot.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Track.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PrimaryPlayerChangedEvent.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlayerStateUpdateEvent.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PositionDiscontinuityEvent.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlaybackStateChangedEvent.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlaybackEndedEvent.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PictureInPictureModeChangedEvent.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MediaItemTransitionEvent.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          BufferMode.ofRaw(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          RepeatMode.ofRaw(it)
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PlaybackState.ofRaw(it)
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          CastConnectionState.ofRaw(it)
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          TrackType.ofRaw(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NpawConfig -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is AppConfig -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is MediaItem -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is MediaMetadata -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is PlayerStateSnapshot -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is PlayerError -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is VideoSize -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is ChromecastState -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is MediaInfo -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is PlayerTracksSnapshot -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is Track -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is PrimaryPlayerChangedEvent -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is PlayerStateUpdateEvent -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is PositionDiscontinuityEvent -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is PlaybackStateChangedEvent -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is PlaybackEndedEvent -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is PictureInPictureModeChangedEvent -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is MediaItemTransitionEvent -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is BufferMode -> {
        stream.write(147)
        writeValue(stream, value.raw)
      }
      is RepeatMode -> {
        stream.write(148)
        writeValue(stream, value.raw)
      }
      is PlaybackState -> {
        stream.write(149)
        writeValue(stream, value.raw)
      }
      is CastConnectionState -> {
        stream.write(150)
        writeValue(stream, value.raw)
      }
      is TrackType -> {
        stream.write(151)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/**
 * The main interface, used by the flutter side to control the player.
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface PlaybackPlatformPigeon {
  fun attach(callback: (Result<Unit>) -> Unit)
  fun newPlayer(bufferMode: BufferMode?, disableNpaw: Boolean?, callback: (Result<String>) -> Unit)
  fun createVideoTexture(callback: (Result<Long>) -> Unit)
  fun disposeVideoTexture(textureId: Long, callback: (Result<Boolean>) -> Unit)
  fun switchToVideoTexture(playerId: String, textureId: Long, callback: (Result<Long>) -> Unit)
  fun disposePlayer(playerId: String, callback: (Result<Boolean>) -> Unit)
  fun queueMediaItem(playerId: String, mediaItem: MediaItem, callback: (Result<Unit>) -> Unit)
  fun replaceCurrentMediaItem(playerId: String, mediaItem: MediaItem, playbackPositionFromPrimary: Boolean?, autoplay: Boolean?, callback: (Result<Unit>) -> Unit)
  fun setPlayerViewVisibility(viewId: Long, visible: Boolean)
  fun setPrimary(id: String, callback: (Result<Unit>) -> Unit)
  fun play(playerId: String)
  fun seekTo(playerId: String, positionMs: Double, callback: (Result<Unit>) -> Unit)
  fun pause(playerId: String)
  fun stop(playerId: String, reset: Boolean)
  fun setVolume(playerId: String, volume: Double, callback: (Result<Unit>) -> Unit)
  fun setRepeatMode(playerId: String, repeatMode: RepeatMode, callback: (Result<Unit>) -> Unit)
  fun setSelectedTrack(playerId: String, type: TrackType, trackId: String?, callback: (Result<Unit>) -> Unit)
  fun setPlaybackSpeed(playerId: String, speed: Double, callback: (Result<Unit>) -> Unit)
  fun exitFullscreen(playerId: String)
  fun enterFullscreen(playerId: String)
  fun setMixWithOthers(playerId: String, mixWithOthers: Boolean, callback: (Result<Unit>) -> Unit)
  fun setNpawConfig(config: NpawConfig?)
  fun setAppConfig(config: AppConfig?)
  fun getTracks(playerId: String?, callback: (Result<PlayerTracksSnapshot?>) -> Unit)
  fun getPlayerState(playerId: String?, callback: (Result<PlayerStateSnapshot?>) -> Unit)
  fun getChromecastState(callback: (Result<ChromecastState?>) -> Unit)
  fun openExpandedCastController()
  fun openCastDialog()
  fun fetchMediaInfo(url: String, mimeType: String?, callback: (Result<MediaInfo>) -> Unit)
  fun getAndroidPerformanceClass(callback: (Result<Long>) -> Unit)

  companion object {
    /** The codec used by PlaybackPlatformPigeon. */
    val codec: MessageCodec<Any?> by lazy {
      PlaybackPlatformApiPigeonCodec
    }
    /** Sets up an instance of `PlaybackPlatformPigeon` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: PlaybackPlatformPigeon?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.attach$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.attach{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.newPlayer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val bufferModeArg = args[0] as BufferMode?
            val disableNpawArg = args[1] as Boolean?
            api.newPlayer(bufferModeArg, disableNpawArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.createVideoTexture$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.createVideoTexture{ result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.disposeVideoTexture$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val textureIdArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            api.disposeVideoTexture(textureIdArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.switchToVideoTexture$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val textureIdArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            api.switchToVideoTexture(playerIdArg, textureIdArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.disposePlayer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            api.disposePlayer(playerIdArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.queueMediaItem$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val mediaItemArg = args[1] as MediaItem
            api.queueMediaItem(playerIdArg, mediaItemArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.replaceCurrentMediaItem$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val mediaItemArg = args[1] as MediaItem
            val playbackPositionFromPrimaryArg = args[2] as Boolean?
            val autoplayArg = args[3] as Boolean?
            api.replaceCurrentMediaItem(playerIdArg, mediaItemArg, playbackPositionFromPrimaryArg, autoplayArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPlayerViewVisibility$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val viewIdArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val visibleArg = args[1] as Boolean
            val wrapped: List<Any?> = try {
              api.setPlayerViewVisibility(viewIdArg, visibleArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPrimary$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            api.setPrimary(idArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.play$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.play(playerIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.seekTo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val positionMsArg = args[1] as Double
            api.seekTo(playerIdArg, positionMsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.pause$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.pause(playerIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.stop$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val resetArg = args[1] as Boolean
            val wrapped: List<Any?> = try {
              api.stop(playerIdArg, resetArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setVolume$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val volumeArg = args[1] as Double
            api.setVolume(playerIdArg, volumeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setRepeatMode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val repeatModeArg = args[1] as RepeatMode
            api.setRepeatMode(playerIdArg, repeatModeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setSelectedTrack$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val typeArg = args[1] as TrackType
            val trackIdArg = args[2] as String?
            api.setSelectedTrack(playerIdArg, typeArg, trackIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPlaybackSpeed$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val speedArg = args[1] as Double
            api.setPlaybackSpeed(playerIdArg, speedArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.exitFullscreen$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.exitFullscreen(playerIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.enterFullscreen$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.enterFullscreen(playerIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setMixWithOthers$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String
            val mixWithOthersArg = args[1] as Boolean
            api.setMixWithOthers(playerIdArg, mixWithOthersArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setNpawConfig$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as NpawConfig?
            val wrapped: List<Any?> = try {
              api.setNpawConfig(configArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setAppConfig$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as AppConfig?
            val wrapped: List<Any?> = try {
              api.setAppConfig(configArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getTracks$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String?
            api.getTracks(playerIdArg) { result: Result<PlayerTracksSnapshot?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getPlayerState$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val playerIdArg = args[0] as String?
            api.getPlayerState(playerIdArg) { result: Result<PlayerStateSnapshot?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getChromecastState$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getChromecastState{ result: Result<ChromecastState?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.openExpandedCastController$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.openExpandedCastController()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.openCastDialog$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.openCastDialog()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.fetchMediaInfo$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val urlArg = args[0] as String
            val mimeTypeArg = args[1] as String?
            api.fetchMediaInfo(urlArg, mimeTypeArg) { result: Result<MediaInfo> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getAndroidPerformanceClass$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getAndroidPerformanceClass{ result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/**
 * /////////////// Playback Listener
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
class PlaybackListenerPigeon(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by PlaybackListenerPigeon. */
    val codec: MessageCodec<Any?> by lazy {
      PlaybackPlatformApiPigeonCodec
    }
  }
  fun onPrimaryPlayerChanged(eventArg: PrimaryPlayerChangedEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPrimaryPlayerChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onPositionDiscontinuity(eventArg: PositionDiscontinuityEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPositionDiscontinuity$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onPlayerStateUpdate(eventArg: PlayerStateUpdateEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlayerStateUpdate$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onPlaybackStateChanged(eventArg: PlaybackStateChangedEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackStateChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onPlaybackEnded(eventArg: PlaybackEndedEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackEnded$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onMediaItemTransition(eventArg: MediaItemTransitionEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onMediaItemTransition$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onPictureInPictureModeChanged(eventArg: PictureInPictureModeChangedEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPictureInPictureModeChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
