// Autogenerated from Pigeon (v20.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package media.bcc.bccm_player.pigeon.downloader

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class DownloadStatus(val raw: Int) {
  DOWNLOADING(0),
  PAUSED(1),
  FINISHED(2),
  FAILED(3),
  QUEUED(4),
  REMOVING(5);

  companion object {
    fun ofRaw(raw: Int): DownloadStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DownloadConfig (
  val url: String,
  val mimeType: String,
  val title: String,
  val audioTrackIds: List<String?>,
  val videoTrackIds: List<String?>,
  val additionalData: Map<String?, String?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): DownloadConfig {
      val url = __pigeon_list[0] as String
      val mimeType = __pigeon_list[1] as String
      val title = __pigeon_list[2] as String
      val audioTrackIds = __pigeon_list[3] as List<String?>
      val videoTrackIds = __pigeon_list[4] as List<String?>
      val additionalData = __pigeon_list[5] as Map<String?, String?>
      return DownloadConfig(url, mimeType, title, audioTrackIds, videoTrackIds, additionalData)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      url,
      mimeType,
      title,
      audioTrackIds,
      videoTrackIds,
      additionalData,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Download (
  val key: String,
  val config: DownloadConfig,
  val offlineUrl: String? = null,
  val fractionDownloaded: Double,
  val status: DownloadStatus,
  val error: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): Download {
      val key = __pigeon_list[0] as String
      val config = __pigeon_list[1] as DownloadConfig
      val offlineUrl = __pigeon_list[2] as String?
      val fractionDownloaded = __pigeon_list[3] as Double
      val status = __pigeon_list[4] as DownloadStatus
      val error = __pigeon_list[5] as String?
      return Download(key, config, offlineUrl, fractionDownloaded, status, error)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      key,
      config,
      offlineUrl,
      fractionDownloaded,
      status,
      error,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DownloadFailedEvent (
  val key: String,
  val error: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): DownloadFailedEvent {
      val key = __pigeon_list[0] as String
      val error = __pigeon_list[1] as String?
      return DownloadFailedEvent(key, error)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      key,
      error,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DownloadRemovedEvent (
  val key: String

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): DownloadRemovedEvent {
      val key = __pigeon_list[0] as String
      return DownloadRemovedEvent(key)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      key,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DownloadChangedEvent (
  val download: Download

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): DownloadChangedEvent {
      val download = __pigeon_list[0] as Download
      return DownloadChangedEvent(download)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      download,
    )
  }
}
private object DownloaderApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DownloadConfig.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Download.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DownloadFailedEvent.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DownloadRemovedEvent.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DownloadChangedEvent.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          DownloadStatus.ofRaw(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is DownloadConfig -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is Download -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is DownloadFailedEvent -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is DownloadRemovedEvent -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is DownloadChangedEvent -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is DownloadStatus -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/**
 * An API called by the native side to notify about chromecast changes
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface DownloaderPigeon {
  fun startDownload(downloadConfig: DownloadConfig, callback: (Result<Download>) -> Unit)
  fun getDownloadStatus(downloadKey: String, callback: (Result<Double>) -> Unit)
  fun getDownloads(callback: (Result<List<Download>>) -> Unit)
  fun getDownload(downloadKey: String, callback: (Result<Download?>) -> Unit)
  fun removeDownload(downloadKey: String, callback: (Result<Unit>) -> Unit)
  /** Returns free space in bytes */
  fun getFreeDiskSpace(callback: (Result<Double>) -> Unit)

  companion object {
    /** The codec used by DownloaderPigeon. */
    val codec: MessageCodec<Any?> by lazy {
      DownloaderApiPigeonCodec
    }
    /** Sets up an instance of `DownloaderPigeon` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: DownloaderPigeon?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.DownloaderPigeon.startDownload$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val downloadConfigArg = args[0] as DownloadConfig
            api.startDownload(downloadConfigArg) { result: Result<Download> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownloadStatus$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val downloadKeyArg = args[0] as String
            api.getDownloadStatus(downloadKeyArg) { result: Result<Double> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownloads$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getDownloads{ result: Result<List<Download>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getDownload$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val downloadKeyArg = args[0] as String
            api.getDownload(downloadKeyArg) { result: Result<Download?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.DownloaderPigeon.removeDownload$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val downloadKeyArg = args[0] as String
            api.removeDownload(downloadKeyArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bccm_player.DownloaderPigeon.getFreeDiskSpace$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getFreeDiskSpace{ result: Result<Double> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class DownloaderListenerPigeon(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by DownloaderListenerPigeon. */
    val codec: MessageCodec<Any?> by lazy {
      DownloaderApiPigeonCodec
    }
  }
  fun onDownloadStatusChanged(eventArg: DownloadChangedEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bccm_player.DownloaderListenerPigeon.onDownloadStatusChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onDownloadRemoved(eventArg: DownloadRemovedEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bccm_player.DownloaderListenerPigeon.onDownloadRemoved$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onDownloadFailed(eventArg: DownloadFailedEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.bccm_player.DownloaderListenerPigeon.onDownloadFailed$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
