// Autogenerated from Pigeon (v22.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package media.bcc.bccm_player.pigeon;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class PlaybackPlatformApi {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  public enum BufferMode {
    STANDARD(0),
    FAST_START_SHORT_FORM(1);

    final int index;

    BufferMode(final int index) {
      this.index = index;
    }
  }

  public enum RepeatMode {
    OFF(0),
    ONE(1);

    final int index;

    RepeatMode(final int index) {
      this.index = index;
    }
  }

  public enum PlaybackState {
    STOPPED(0),
    PAUSED(1),
    PLAYING(2);

    final int index;

    PlaybackState(final int index) {
      this.index = index;
    }
  }

  public enum CastConnectionState {
    NONE(0),
    NO_DEVICES_AVAILABLE(1),
    NOT_CONNECTED(2),
    CONNECTING(3),
    CONNECTED(4);

    final int index;

    CastConnectionState(final int index) {
      this.index = index;
    }
  }

  public enum TrackType {
    AUDIO(0),
    TEXT(1),
    VIDEO(2);

    final int index;

    TrackType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NpawConfig {
    private @Nullable String appName;

    public @Nullable String getAppName() {
      return appName;
    }

    public void setAppName(@Nullable String setterArg) {
      this.appName = setterArg;
    }

    private @Nullable String appReleaseVersion;

    public @Nullable String getAppReleaseVersion() {
      return appReleaseVersion;
    }

    public void setAppReleaseVersion(@Nullable String setterArg) {
      this.appReleaseVersion = setterArg;
    }

    private @Nullable String accountCode;

    public @Nullable String getAccountCode() {
      return accountCode;
    }

    public void setAccountCode(@Nullable String setterArg) {
      this.accountCode = setterArg;
    }

    private @Nullable Boolean deviceIsAnonymous;

    public @Nullable Boolean getDeviceIsAnonymous() {
      return deviceIsAnonymous;
    }

    public void setDeviceIsAnonymous(@Nullable Boolean setterArg) {
      this.deviceIsAnonymous = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      NpawConfig that = (NpawConfig) o;
      return Objects.equals(appName, that.appName) && Objects.equals(appReleaseVersion, that.appReleaseVersion) && Objects.equals(accountCode, that.accountCode) && Objects.equals(deviceIsAnonymous, that.deviceIsAnonymous);
    }

    @Override
    public int hashCode() {
      return Objects.hash(appName, appReleaseVersion, accountCode, deviceIsAnonymous);
    }

    public static final class Builder {

      private @Nullable String appName;

      @CanIgnoreReturnValue
      public @NonNull Builder setAppName(@Nullable String setterArg) {
        this.appName = setterArg;
        return this;
      }

      private @Nullable String appReleaseVersion;

      @CanIgnoreReturnValue
      public @NonNull Builder setAppReleaseVersion(@Nullable String setterArg) {
        this.appReleaseVersion = setterArg;
        return this;
      }

      private @Nullable String accountCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setAccountCode(@Nullable String setterArg) {
        this.accountCode = setterArg;
        return this;
      }

      private @Nullable Boolean deviceIsAnonymous;

      @CanIgnoreReturnValue
      public @NonNull Builder setDeviceIsAnonymous(@Nullable Boolean setterArg) {
        this.deviceIsAnonymous = setterArg;
        return this;
      }

      public @NonNull NpawConfig build() {
        NpawConfig pigeonReturn = new NpawConfig();
        pigeonReturn.setAppName(appName);
        pigeonReturn.setAppReleaseVersion(appReleaseVersion);
        pigeonReturn.setAccountCode(accountCode);
        pigeonReturn.setDeviceIsAnonymous(deviceIsAnonymous);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(4);
      toListResult.add(appName);
      toListResult.add(appReleaseVersion);
      toListResult.add(accountCode);
      toListResult.add(deviceIsAnonymous);
      return toListResult;
    }

    static @NonNull NpawConfig fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      NpawConfig pigeonResult = new NpawConfig();
      Object appName = pigeonVar_list.get(0);
      pigeonResult.setAppName((String) appName);
      Object appReleaseVersion = pigeonVar_list.get(1);
      pigeonResult.setAppReleaseVersion((String) appReleaseVersion);
      Object accountCode = pigeonVar_list.get(2);
      pigeonResult.setAccountCode((String) accountCode);
      Object deviceIsAnonymous = pigeonVar_list.get(3);
      pigeonResult.setDeviceIsAnonymous((Boolean) deviceIsAnonymous);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AppConfig {
    private @Nullable String appLanguage;

    public @Nullable String getAppLanguage() {
      return appLanguage;
    }

    public void setAppLanguage(@Nullable String setterArg) {
      this.appLanguage = setterArg;
    }

    private @NonNull List<String> audioLanguages;

    public @NonNull List<String> getAudioLanguages() {
      return audioLanguages;
    }

    public void setAudioLanguages(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"audioLanguages\" is null.");
      }
      this.audioLanguages = setterArg;
    }

    private @NonNull List<String> subtitleLanguages;

    public @NonNull List<String> getSubtitleLanguages() {
      return subtitleLanguages;
    }

    public void setSubtitleLanguages(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"subtitleLanguages\" is null.");
      }
      this.subtitleLanguages = setterArg;
    }

    private @Nullable String analyticsId;

    public @Nullable String getAnalyticsId() {
      return analyticsId;
    }

    public void setAnalyticsId(@Nullable String setterArg) {
      this.analyticsId = setterArg;
    }

    private @Nullable Long sessionId;

    public @Nullable Long getSessionId() {
      return sessionId;
    }

    public void setSessionId(@Nullable Long setterArg) {
      this.sessionId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AppConfig() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      AppConfig that = (AppConfig) o;
      return Objects.equals(appLanguage, that.appLanguage) && audioLanguages.equals(that.audioLanguages) && subtitleLanguages.equals(that.subtitleLanguages) && Objects.equals(analyticsId, that.analyticsId) && Objects.equals(sessionId, that.sessionId);
    }

    @Override
    public int hashCode() {
      return Objects.hash(appLanguage, audioLanguages, subtitleLanguages, analyticsId, sessionId);
    }

    public static final class Builder {

      private @Nullable String appLanguage;

      @CanIgnoreReturnValue
      public @NonNull Builder setAppLanguage(@Nullable String setterArg) {
        this.appLanguage = setterArg;
        return this;
      }

      private @Nullable List<String> audioLanguages;

      @CanIgnoreReturnValue
      public @NonNull Builder setAudioLanguages(@NonNull List<String> setterArg) {
        this.audioLanguages = setterArg;
        return this;
      }

      private @Nullable List<String> subtitleLanguages;

      @CanIgnoreReturnValue
      public @NonNull Builder setSubtitleLanguages(@NonNull List<String> setterArg) {
        this.subtitleLanguages = setterArg;
        return this;
      }

      private @Nullable String analyticsId;

      @CanIgnoreReturnValue
      public @NonNull Builder setAnalyticsId(@Nullable String setterArg) {
        this.analyticsId = setterArg;
        return this;
      }

      private @Nullable Long sessionId;

      @CanIgnoreReturnValue
      public @NonNull Builder setSessionId(@Nullable Long setterArg) {
        this.sessionId = setterArg;
        return this;
      }

      public @NonNull AppConfig build() {
        AppConfig pigeonReturn = new AppConfig();
        pigeonReturn.setAppLanguage(appLanguage);
        pigeonReturn.setAudioLanguages(audioLanguages);
        pigeonReturn.setSubtitleLanguages(subtitleLanguages);
        pigeonReturn.setAnalyticsId(analyticsId);
        pigeonReturn.setSessionId(sessionId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(5);
      toListResult.add(appLanguage);
      toListResult.add(audioLanguages);
      toListResult.add(subtitleLanguages);
      toListResult.add(analyticsId);
      toListResult.add(sessionId);
      return toListResult;
    }

    static @NonNull AppConfig fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      AppConfig pigeonResult = new AppConfig();
      Object appLanguage = pigeonVar_list.get(0);
      pigeonResult.setAppLanguage((String) appLanguage);
      Object audioLanguages = pigeonVar_list.get(1);
      pigeonResult.setAudioLanguages((List<String>) audioLanguages);
      Object subtitleLanguages = pigeonVar_list.get(2);
      pigeonResult.setSubtitleLanguages((List<String>) subtitleLanguages);
      Object analyticsId = pigeonVar_list.get(3);
      pigeonResult.setAnalyticsId((String) analyticsId);
      Object sessionId = pigeonVar_list.get(4);
      pigeonResult.setSessionId((Long) sessionId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class User {
    private @Nullable String id;

    public @Nullable String getId() {
      return id;
    }

    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      User that = (User) o;
      return Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
      return Objects.hash(id);
    }

    public static final class Builder {

      private @Nullable String id;

      @CanIgnoreReturnValue
      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }

      public @NonNull User build() {
        User pigeonReturn = new User();
        pigeonReturn.setId(id);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(1);
      toListResult.add(id);
      return toListResult;
    }

    static @NonNull User fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      User pigeonResult = new User();
      Object id = pigeonVar_list.get(0);
      pigeonResult.setId((String) id);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SetUrlArgs {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull String url;

    public @NonNull String getUrl() {
      return url;
    }

    public void setUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"url\" is null.");
      }
      this.url = setterArg;
    }

    private @Nullable Boolean isLive;

    public @Nullable Boolean getIsLive() {
      return isLive;
    }

    public void setIsLive(@Nullable Boolean setterArg) {
      this.isLive = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    SetUrlArgs() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      SetUrlArgs that = (SetUrlArgs) o;
      return playerId.equals(that.playerId) && url.equals(that.url) && Objects.equals(isLive, that.isLive);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, url, isLive);
    }

    public static final class Builder {

      private @Nullable String playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable String url;

      @CanIgnoreReturnValue
      public @NonNull Builder setUrl(@NonNull String setterArg) {
        this.url = setterArg;
        return this;
      }

      private @Nullable Boolean isLive;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsLive(@Nullable Boolean setterArg) {
        this.isLive = setterArg;
        return this;
      }

      public @NonNull SetUrlArgs build() {
        SetUrlArgs pigeonReturn = new SetUrlArgs();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setUrl(url);
        pigeonReturn.setIsLive(isLive);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(3);
      toListResult.add(playerId);
      toListResult.add(url);
      toListResult.add(isLive);
      return toListResult;
    }

    static @NonNull SetUrlArgs fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      SetUrlArgs pigeonResult = new SetUrlArgs();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object url = pigeonVar_list.get(1);
      pigeonResult.setUrl((String) url);
      Object isLive = pigeonVar_list.get(2);
      pigeonResult.setIsLive((Boolean) isLive);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MediaItem {
    private @Nullable String id;

    public @Nullable String getId() {
      return id;
    }

    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    private @Nullable String url;

    public @Nullable String getUrl() {
      return url;
    }

    public void setUrl(@Nullable String setterArg) {
      this.url = setterArg;
    }

    private @Nullable String mimeType;

    public @Nullable String getMimeType() {
      return mimeType;
    }

    public void setMimeType(@Nullable String setterArg) {
      this.mimeType = setterArg;
    }

    private @Nullable MediaMetadata metadata;

    public @Nullable MediaMetadata getMetadata() {
      return metadata;
    }

    public void setMetadata(@Nullable MediaMetadata setterArg) {
      this.metadata = setterArg;
    }

    private @Nullable Boolean isLive;

    public @Nullable Boolean getIsLive() {
      return isLive;
    }

    public void setIsLive(@Nullable Boolean setterArg) {
      this.isLive = setterArg;
    }

    private @Nullable Boolean isOffline;

    public @Nullable Boolean getIsOffline() {
      return isOffline;
    }

    public void setIsOffline(@Nullable Boolean setterArg) {
      this.isOffline = setterArg;
    }

    private @Nullable Double playbackStartPositionMs;

    public @Nullable Double getPlaybackStartPositionMs() {
      return playbackStartPositionMs;
    }

    public void setPlaybackStartPositionMs(@Nullable Double setterArg) {
      this.playbackStartPositionMs = setterArg;
    }

    private @Nullable String lastKnownAudioLanguage;

    public @Nullable String getLastKnownAudioLanguage() {
      return lastKnownAudioLanguage;
    }

    public void setLastKnownAudioLanguage(@Nullable String setterArg) {
      this.lastKnownAudioLanguage = setterArg;
    }

    private @Nullable String lastKnownSubtitleLanguage;

    public @Nullable String getLastKnownSubtitleLanguage() {
      return lastKnownSubtitleLanguage;
    }

    public void setLastKnownSubtitleLanguage(@Nullable String setterArg) {
      this.lastKnownSubtitleLanguage = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      MediaItem that = (MediaItem) o;
      return Objects.equals(id, that.id) && Objects.equals(url, that.url) && Objects.equals(mimeType, that.mimeType) && Objects.equals(metadata, that.metadata) && Objects.equals(isLive, that.isLive) && Objects.equals(isOffline, that.isOffline) && Objects.equals(playbackStartPositionMs, that.playbackStartPositionMs) && Objects.equals(lastKnownAudioLanguage, that.lastKnownAudioLanguage) && Objects.equals(lastKnownSubtitleLanguage, that.lastKnownSubtitleLanguage);
    }

    @Override
    public int hashCode() {
      return Objects.hash(id, url, mimeType, metadata, isLive, isOffline, playbackStartPositionMs, lastKnownAudioLanguage, lastKnownSubtitleLanguage);
    }

    public static final class Builder {

      private @Nullable String id;

      @CanIgnoreReturnValue
      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String url;

      @CanIgnoreReturnValue
      public @NonNull Builder setUrl(@Nullable String setterArg) {
        this.url = setterArg;
        return this;
      }

      private @Nullable String mimeType;

      @CanIgnoreReturnValue
      public @NonNull Builder setMimeType(@Nullable String setterArg) {
        this.mimeType = setterArg;
        return this;
      }

      private @Nullable MediaMetadata metadata;

      @CanIgnoreReturnValue
      public @NonNull Builder setMetadata(@Nullable MediaMetadata setterArg) {
        this.metadata = setterArg;
        return this;
      }

      private @Nullable Boolean isLive;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsLive(@Nullable Boolean setterArg) {
        this.isLive = setterArg;
        return this;
      }

      private @Nullable Boolean isOffline;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsOffline(@Nullable Boolean setterArg) {
        this.isOffline = setterArg;
        return this;
      }

      private @Nullable Double playbackStartPositionMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlaybackStartPositionMs(@Nullable Double setterArg) {
        this.playbackStartPositionMs = setterArg;
        return this;
      }

      private @Nullable String lastKnownAudioLanguage;

      @CanIgnoreReturnValue
      public @NonNull Builder setLastKnownAudioLanguage(@Nullable String setterArg) {
        this.lastKnownAudioLanguage = setterArg;
        return this;
      }

      private @Nullable String lastKnownSubtitleLanguage;

      @CanIgnoreReturnValue
      public @NonNull Builder setLastKnownSubtitleLanguage(@Nullable String setterArg) {
        this.lastKnownSubtitleLanguage = setterArg;
        return this;
      }

      public @NonNull MediaItem build() {
        MediaItem pigeonReturn = new MediaItem();
        pigeonReturn.setId(id);
        pigeonReturn.setUrl(url);
        pigeonReturn.setMimeType(mimeType);
        pigeonReturn.setMetadata(metadata);
        pigeonReturn.setIsLive(isLive);
        pigeonReturn.setIsOffline(isOffline);
        pigeonReturn.setPlaybackStartPositionMs(playbackStartPositionMs);
        pigeonReturn.setLastKnownAudioLanguage(lastKnownAudioLanguage);
        pigeonReturn.setLastKnownSubtitleLanguage(lastKnownSubtitleLanguage);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(9);
      toListResult.add(id);
      toListResult.add(url);
      toListResult.add(mimeType);
      toListResult.add(metadata);
      toListResult.add(isLive);
      toListResult.add(isOffline);
      toListResult.add(playbackStartPositionMs);
      toListResult.add(lastKnownAudioLanguage);
      toListResult.add(lastKnownSubtitleLanguage);
      return toListResult;
    }

    static @NonNull MediaItem fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      MediaItem pigeonResult = new MediaItem();
      Object id = pigeonVar_list.get(0);
      pigeonResult.setId((String) id);
      Object url = pigeonVar_list.get(1);
      pigeonResult.setUrl((String) url);
      Object mimeType = pigeonVar_list.get(2);
      pigeonResult.setMimeType((String) mimeType);
      Object metadata = pigeonVar_list.get(3);
      pigeonResult.setMetadata((MediaMetadata) metadata);
      Object isLive = pigeonVar_list.get(4);
      pigeonResult.setIsLive((Boolean) isLive);
      Object isOffline = pigeonVar_list.get(5);
      pigeonResult.setIsOffline((Boolean) isOffline);
      Object playbackStartPositionMs = pigeonVar_list.get(6);
      pigeonResult.setPlaybackStartPositionMs((Double) playbackStartPositionMs);
      Object lastKnownAudioLanguage = pigeonVar_list.get(7);
      pigeonResult.setLastKnownAudioLanguage((String) lastKnownAudioLanguage);
      Object lastKnownSubtitleLanguage = pigeonVar_list.get(8);
      pigeonResult.setLastKnownSubtitleLanguage((String) lastKnownSubtitleLanguage);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MediaMetadata {
    private @Nullable String artworkUri;

    public @Nullable String getArtworkUri() {
      return artworkUri;
    }

    public void setArtworkUri(@Nullable String setterArg) {
      this.artworkUri = setterArg;
    }

    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String artist;

    public @Nullable String getArtist() {
      return artist;
    }

    public void setArtist(@Nullable String setterArg) {
      this.artist = setterArg;
    }

    private @Nullable Double durationMs;

    public @Nullable Double getDurationMs() {
      return durationMs;
    }

    public void setDurationMs(@Nullable Double setterArg) {
      this.durationMs = setterArg;
    }

    private @Nullable Map<String, String> extras;

    public @Nullable Map<String, String> getExtras() {
      return extras;
    }

    public void setExtras(@Nullable Map<String, String> setterArg) {
      this.extras = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      MediaMetadata that = (MediaMetadata) o;
      return Objects.equals(artworkUri, that.artworkUri) && Objects.equals(title, that.title) && Objects.equals(artist, that.artist) && Objects.equals(durationMs, that.durationMs) && Objects.equals(extras, that.extras);
    }

    @Override
    public int hashCode() {
      return Objects.hash(artworkUri, title, artist, durationMs, extras);
    }

    public static final class Builder {

      private @Nullable String artworkUri;

      @CanIgnoreReturnValue
      public @NonNull Builder setArtworkUri(@Nullable String setterArg) {
        this.artworkUri = setterArg;
        return this;
      }

      private @Nullable String title;

      @CanIgnoreReturnValue
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String artist;

      @CanIgnoreReturnValue
      public @NonNull Builder setArtist(@Nullable String setterArg) {
        this.artist = setterArg;
        return this;
      }

      private @Nullable Double durationMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setDurationMs(@Nullable Double setterArg) {
        this.durationMs = setterArg;
        return this;
      }

      private @Nullable Map<String, String> extras;

      @CanIgnoreReturnValue
      public @NonNull Builder setExtras(@Nullable Map<String, String> setterArg) {
        this.extras = setterArg;
        return this;
      }

      public @NonNull MediaMetadata build() {
        MediaMetadata pigeonReturn = new MediaMetadata();
        pigeonReturn.setArtworkUri(artworkUri);
        pigeonReturn.setTitle(title);
        pigeonReturn.setArtist(artist);
        pigeonReturn.setDurationMs(durationMs);
        pigeonReturn.setExtras(extras);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(5);
      toListResult.add(artworkUri);
      toListResult.add(title);
      toListResult.add(artist);
      toListResult.add(durationMs);
      toListResult.add(extras);
      return toListResult;
    }

    static @NonNull MediaMetadata fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      MediaMetadata pigeonResult = new MediaMetadata();
      Object artworkUri = pigeonVar_list.get(0);
      pigeonResult.setArtworkUri((String) artworkUri);
      Object title = pigeonVar_list.get(1);
      pigeonResult.setTitle((String) title);
      Object artist = pigeonVar_list.get(2);
      pigeonResult.setArtist((String) artist);
      Object durationMs = pigeonVar_list.get(3);
      pigeonResult.setDurationMs((Double) durationMs);
      Object extras = pigeonVar_list.get(4);
      pigeonResult.setExtras((Map<String, String>) extras);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PlayerStateSnapshot {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull PlaybackState playbackState;

    public @NonNull PlaybackState getPlaybackState() {
      return playbackState;
    }

    public void setPlaybackState(@NonNull PlaybackState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playbackState\" is null.");
      }
      this.playbackState = setterArg;
    }

    private @NonNull Boolean isBuffering;

    public @NonNull Boolean getIsBuffering() {
      return isBuffering;
    }

    public void setIsBuffering(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isBuffering\" is null.");
      }
      this.isBuffering = setterArg;
    }

    private @NonNull Boolean isFullscreen;

    public @NonNull Boolean getIsFullscreen() {
      return isFullscreen;
    }

    public void setIsFullscreen(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isFullscreen\" is null.");
      }
      this.isFullscreen = setterArg;
    }

    private @NonNull Double playbackSpeed;

    public @NonNull Double getPlaybackSpeed() {
      return playbackSpeed;
    }

    public void setPlaybackSpeed(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playbackSpeed\" is null.");
      }
      this.playbackSpeed = setterArg;
    }

    private @Nullable VideoSize videoSize;

    public @Nullable VideoSize getVideoSize() {
      return videoSize;
    }

    public void setVideoSize(@Nullable VideoSize setterArg) {
      this.videoSize = setterArg;
    }

    private @Nullable MediaItem currentMediaItem;

    public @Nullable MediaItem getCurrentMediaItem() {
      return currentMediaItem;
    }

    public void setCurrentMediaItem(@Nullable MediaItem setterArg) {
      this.currentMediaItem = setterArg;
    }

    private @Nullable Double playbackPositionMs;

    public @Nullable Double getPlaybackPositionMs() {
      return playbackPositionMs;
    }

    public void setPlaybackPositionMs(@Nullable Double setterArg) {
      this.playbackPositionMs = setterArg;
    }

    private @Nullable Long textureId;

    public @Nullable Long getTextureId() {
      return textureId;
    }

    public void setTextureId(@Nullable Long setterArg) {
      this.textureId = setterArg;
    }

    private @Nullable Double volume;

    public @Nullable Double getVolume() {
      return volume;
    }

    public void setVolume(@Nullable Double setterArg) {
      this.volume = setterArg;
    }

    private @Nullable PlayerError error;

    public @Nullable PlayerError getError() {
      return error;
    }

    public void setError(@Nullable PlayerError setterArg) {
      this.error = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlayerStateSnapshot() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      PlayerStateSnapshot that = (PlayerStateSnapshot) o;
      return playerId.equals(that.playerId) && playbackState.equals(that.playbackState) && isBuffering.equals(that.isBuffering) && isFullscreen.equals(that.isFullscreen) && playbackSpeed.equals(that.playbackSpeed) && Objects.equals(videoSize, that.videoSize) && Objects.equals(currentMediaItem, that.currentMediaItem) && Objects.equals(playbackPositionMs, that.playbackPositionMs) && Objects.equals(textureId, that.textureId) && Objects.equals(volume, that.volume) && Objects.equals(error, that.error);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, playbackState, isBuffering, isFullscreen, playbackSpeed, videoSize, currentMediaItem, playbackPositionMs, textureId, volume, error);
    }

    public static final class Builder {

      private @Nullable String playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable PlaybackState playbackState;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlaybackState(@NonNull PlaybackState setterArg) {
        this.playbackState = setterArg;
        return this;
      }

      private @Nullable Boolean isBuffering;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsBuffering(@NonNull Boolean setterArg) {
        this.isBuffering = setterArg;
        return this;
      }

      private @Nullable Boolean isFullscreen;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsFullscreen(@NonNull Boolean setterArg) {
        this.isFullscreen = setterArg;
        return this;
      }

      private @Nullable Double playbackSpeed;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlaybackSpeed(@NonNull Double setterArg) {
        this.playbackSpeed = setterArg;
        return this;
      }

      private @Nullable VideoSize videoSize;

      @CanIgnoreReturnValue
      public @NonNull Builder setVideoSize(@Nullable VideoSize setterArg) {
        this.videoSize = setterArg;
        return this;
      }

      private @Nullable MediaItem currentMediaItem;

      @CanIgnoreReturnValue
      public @NonNull Builder setCurrentMediaItem(@Nullable MediaItem setterArg) {
        this.currentMediaItem = setterArg;
        return this;
      }

      private @Nullable Double playbackPositionMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlaybackPositionMs(@Nullable Double setterArg) {
        this.playbackPositionMs = setterArg;
        return this;
      }

      private @Nullable Long textureId;

      @CanIgnoreReturnValue
      public @NonNull Builder setTextureId(@Nullable Long setterArg) {
        this.textureId = setterArg;
        return this;
      }

      private @Nullable Double volume;

      @CanIgnoreReturnValue
      public @NonNull Builder setVolume(@Nullable Double setterArg) {
        this.volume = setterArg;
        return this;
      }

      private @Nullable PlayerError error;

      @CanIgnoreReturnValue
      public @NonNull Builder setError(@Nullable PlayerError setterArg) {
        this.error = setterArg;
        return this;
      }

      public @NonNull PlayerStateSnapshot build() {
        PlayerStateSnapshot pigeonReturn = new PlayerStateSnapshot();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setPlaybackState(playbackState);
        pigeonReturn.setIsBuffering(isBuffering);
        pigeonReturn.setIsFullscreen(isFullscreen);
        pigeonReturn.setPlaybackSpeed(playbackSpeed);
        pigeonReturn.setVideoSize(videoSize);
        pigeonReturn.setCurrentMediaItem(currentMediaItem);
        pigeonReturn.setPlaybackPositionMs(playbackPositionMs);
        pigeonReturn.setTextureId(textureId);
        pigeonReturn.setVolume(volume);
        pigeonReturn.setError(error);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(11);
      toListResult.add(playerId);
      toListResult.add(playbackState);
      toListResult.add(isBuffering);
      toListResult.add(isFullscreen);
      toListResult.add(playbackSpeed);
      toListResult.add(videoSize);
      toListResult.add(currentMediaItem);
      toListResult.add(playbackPositionMs);
      toListResult.add(textureId);
      toListResult.add(volume);
      toListResult.add(error);
      return toListResult;
    }

    static @NonNull PlayerStateSnapshot fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      PlayerStateSnapshot pigeonResult = new PlayerStateSnapshot();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object playbackState = pigeonVar_list.get(1);
      pigeonResult.setPlaybackState((PlaybackState) playbackState);
      Object isBuffering = pigeonVar_list.get(2);
      pigeonResult.setIsBuffering((Boolean) isBuffering);
      Object isFullscreen = pigeonVar_list.get(3);
      pigeonResult.setIsFullscreen((Boolean) isFullscreen);
      Object playbackSpeed = pigeonVar_list.get(4);
      pigeonResult.setPlaybackSpeed((Double) playbackSpeed);
      Object videoSize = pigeonVar_list.get(5);
      pigeonResult.setVideoSize((VideoSize) videoSize);
      Object currentMediaItem = pigeonVar_list.get(6);
      pigeonResult.setCurrentMediaItem((MediaItem) currentMediaItem);
      Object playbackPositionMs = pigeonVar_list.get(7);
      pigeonResult.setPlaybackPositionMs((Double) playbackPositionMs);
      Object textureId = pigeonVar_list.get(8);
      pigeonResult.setTextureId((Long) textureId);
      Object volume = pigeonVar_list.get(9);
      pigeonResult.setVolume((Double) volume);
      Object error = pigeonVar_list.get(10);
      pigeonResult.setError((PlayerError) error);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PlayerError {
    private @Nullable String code;

    public @Nullable String getCode() {
      return code;
    }

    public void setCode(@Nullable String setterArg) {
      this.code = setterArg;
    }

    private @Nullable String message;

    public @Nullable String getMessage() {
      return message;
    }

    public void setMessage(@Nullable String setterArg) {
      this.message = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      PlayerError that = (PlayerError) o;
      return Objects.equals(code, that.code) && Objects.equals(message, that.message);
    }

    @Override
    public int hashCode() {
      return Objects.hash(code, message);
    }

    public static final class Builder {

      private @Nullable String code;

      @CanIgnoreReturnValue
      public @NonNull Builder setCode(@Nullable String setterArg) {
        this.code = setterArg;
        return this;
      }

      private @Nullable String message;

      @CanIgnoreReturnValue
      public @NonNull Builder setMessage(@Nullable String setterArg) {
        this.message = setterArg;
        return this;
      }

      public @NonNull PlayerError build() {
        PlayerError pigeonReturn = new PlayerError();
        pigeonReturn.setCode(code);
        pigeonReturn.setMessage(message);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(code);
      toListResult.add(message);
      return toListResult;
    }

    static @NonNull PlayerError fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      PlayerError pigeonResult = new PlayerError();
      Object code = pigeonVar_list.get(0);
      pigeonResult.setCode((String) code);
      Object message = pigeonVar_list.get(1);
      pigeonResult.setMessage((String) message);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class VideoSize {
    private @NonNull Long width;

    public @NonNull Long getWidth() {
      return width;
    }

    public void setWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Long height;

    public @NonNull Long getHeight() {
      return height;
    }

    public void setHeight(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    VideoSize() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      VideoSize that = (VideoSize) o;
      return width.equals(that.width) && height.equals(that.height);
    }

    @Override
    public int hashCode() {
      return Objects.hash(width, height);
    }

    public static final class Builder {

      private @Nullable Long width;

      @CanIgnoreReturnValue
      public @NonNull Builder setWidth(@NonNull Long setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Long height;

      @CanIgnoreReturnValue
      public @NonNull Builder setHeight(@NonNull Long setterArg) {
        this.height = setterArg;
        return this;
      }

      public @NonNull VideoSize build() {
        VideoSize pigeonReturn = new VideoSize();
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(width);
      toListResult.add(height);
      return toListResult;
    }

    static @NonNull VideoSize fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      VideoSize pigeonResult = new VideoSize();
      Object width = pigeonVar_list.get(0);
      pigeonResult.setWidth((Long) width);
      Object height = pigeonVar_list.get(1);
      pigeonResult.setHeight((Long) height);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ChromecastState {
    private @NonNull CastConnectionState connectionState;

    public @NonNull CastConnectionState getConnectionState() {
      return connectionState;
    }

    public void setConnectionState(@NonNull CastConnectionState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"connectionState\" is null.");
      }
      this.connectionState = setterArg;
    }

    private @Nullable MediaItem mediaItem;

    public @Nullable MediaItem getMediaItem() {
      return mediaItem;
    }

    public void setMediaItem(@Nullable MediaItem setterArg) {
      this.mediaItem = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ChromecastState() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      ChromecastState that = (ChromecastState) o;
      return connectionState.equals(that.connectionState) && Objects.equals(mediaItem, that.mediaItem);
    }

    @Override
    public int hashCode() {
      return Objects.hash(connectionState, mediaItem);
    }

    public static final class Builder {

      private @Nullable CastConnectionState connectionState;

      @CanIgnoreReturnValue
      public @NonNull Builder setConnectionState(@NonNull CastConnectionState setterArg) {
        this.connectionState = setterArg;
        return this;
      }

      private @Nullable MediaItem mediaItem;

      @CanIgnoreReturnValue
      public @NonNull Builder setMediaItem(@Nullable MediaItem setterArg) {
        this.mediaItem = setterArg;
        return this;
      }

      public @NonNull ChromecastState build() {
        ChromecastState pigeonReturn = new ChromecastState();
        pigeonReturn.setConnectionState(connectionState);
        pigeonReturn.setMediaItem(mediaItem);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(connectionState);
      toListResult.add(mediaItem);
      return toListResult;
    }

    static @NonNull ChromecastState fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      ChromecastState pigeonResult = new ChromecastState();
      Object connectionState = pigeonVar_list.get(0);
      pigeonResult.setConnectionState((CastConnectionState) connectionState);
      Object mediaItem = pigeonVar_list.get(1);
      pigeonResult.setMediaItem((MediaItem) mediaItem);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MediaInfo {
    private @NonNull List<Track> audioTracks;

    public @NonNull List<Track> getAudioTracks() {
      return audioTracks;
    }

    public void setAudioTracks(@NonNull List<Track> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"audioTracks\" is null.");
      }
      this.audioTracks = setterArg;
    }

    private @NonNull List<Track> textTracks;

    public @NonNull List<Track> getTextTracks() {
      return textTracks;
    }

    public void setTextTracks(@NonNull List<Track> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textTracks\" is null.");
      }
      this.textTracks = setterArg;
    }

    private @NonNull List<Track> videoTracks;

    public @NonNull List<Track> getVideoTracks() {
      return videoTracks;
    }

    public void setVideoTracks(@NonNull List<Track> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"videoTracks\" is null.");
      }
      this.videoTracks = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    MediaInfo() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      MediaInfo that = (MediaInfo) o;
      return audioTracks.equals(that.audioTracks) && textTracks.equals(that.textTracks) && videoTracks.equals(that.videoTracks);
    }

    @Override
    public int hashCode() {
      return Objects.hash(audioTracks, textTracks, videoTracks);
    }

    public static final class Builder {

      private @Nullable List<Track> audioTracks;

      @CanIgnoreReturnValue
      public @NonNull Builder setAudioTracks(@NonNull List<Track> setterArg) {
        this.audioTracks = setterArg;
        return this;
      }

      private @Nullable List<Track> textTracks;

      @CanIgnoreReturnValue
      public @NonNull Builder setTextTracks(@NonNull List<Track> setterArg) {
        this.textTracks = setterArg;
        return this;
      }

      private @Nullable List<Track> videoTracks;

      @CanIgnoreReturnValue
      public @NonNull Builder setVideoTracks(@NonNull List<Track> setterArg) {
        this.videoTracks = setterArg;
        return this;
      }

      public @NonNull MediaInfo build() {
        MediaInfo pigeonReturn = new MediaInfo();
        pigeonReturn.setAudioTracks(audioTracks);
        pigeonReturn.setTextTracks(textTracks);
        pigeonReturn.setVideoTracks(videoTracks);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(3);
      toListResult.add(audioTracks);
      toListResult.add(textTracks);
      toListResult.add(videoTracks);
      return toListResult;
    }

    static @NonNull MediaInfo fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      MediaInfo pigeonResult = new MediaInfo();
      Object audioTracks = pigeonVar_list.get(0);
      pigeonResult.setAudioTracks((List<Track>) audioTracks);
      Object textTracks = pigeonVar_list.get(1);
      pigeonResult.setTextTracks((List<Track>) textTracks);
      Object videoTracks = pigeonVar_list.get(2);
      pigeonResult.setVideoTracks((List<Track>) videoTracks);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PlayerTracksSnapshot {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull List<Track> audioTracks;

    public @NonNull List<Track> getAudioTracks() {
      return audioTracks;
    }

    public void setAudioTracks(@NonNull List<Track> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"audioTracks\" is null.");
      }
      this.audioTracks = setterArg;
    }

    private @NonNull List<Track> textTracks;

    public @NonNull List<Track> getTextTracks() {
      return textTracks;
    }

    public void setTextTracks(@NonNull List<Track> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textTracks\" is null.");
      }
      this.textTracks = setterArg;
    }

    private @NonNull List<Track> videoTracks;

    public @NonNull List<Track> getVideoTracks() {
      return videoTracks;
    }

    public void setVideoTracks(@NonNull List<Track> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"videoTracks\" is null.");
      }
      this.videoTracks = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlayerTracksSnapshot() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      PlayerTracksSnapshot that = (PlayerTracksSnapshot) o;
      return playerId.equals(that.playerId) && audioTracks.equals(that.audioTracks) && textTracks.equals(that.textTracks) && videoTracks.equals(that.videoTracks);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, audioTracks, textTracks, videoTracks);
    }

    public static final class Builder {

      private @Nullable String playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable List<Track> audioTracks;

      @CanIgnoreReturnValue
      public @NonNull Builder setAudioTracks(@NonNull List<Track> setterArg) {
        this.audioTracks = setterArg;
        return this;
      }

      private @Nullable List<Track> textTracks;

      @CanIgnoreReturnValue
      public @NonNull Builder setTextTracks(@NonNull List<Track> setterArg) {
        this.textTracks = setterArg;
        return this;
      }

      private @Nullable List<Track> videoTracks;

      @CanIgnoreReturnValue
      public @NonNull Builder setVideoTracks(@NonNull List<Track> setterArg) {
        this.videoTracks = setterArg;
        return this;
      }

      public @NonNull PlayerTracksSnapshot build() {
        PlayerTracksSnapshot pigeonReturn = new PlayerTracksSnapshot();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setAudioTracks(audioTracks);
        pigeonReturn.setTextTracks(textTracks);
        pigeonReturn.setVideoTracks(videoTracks);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(4);
      toListResult.add(playerId);
      toListResult.add(audioTracks);
      toListResult.add(textTracks);
      toListResult.add(videoTracks);
      return toListResult;
    }

    static @NonNull PlayerTracksSnapshot fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      PlayerTracksSnapshot pigeonResult = new PlayerTracksSnapshot();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object audioTracks = pigeonVar_list.get(1);
      pigeonResult.setAudioTracks((List<Track>) audioTracks);
      Object textTracks = pigeonVar_list.get(2);
      pigeonResult.setTextTracks((List<Track>) textTracks);
      Object videoTracks = pigeonVar_list.get(3);
      pigeonResult.setVideoTracks((List<Track>) videoTracks);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Track {
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable String label;

    public @Nullable String getLabel() {
      return label;
    }

    public void setLabel(@Nullable String setterArg) {
      this.label = setterArg;
    }

    private @Nullable String language;

    public @Nullable String getLanguage() {
      return language;
    }

    public void setLanguage(@Nullable String setterArg) {
      this.language = setterArg;
    }

    private @Nullable Double frameRate;

    public @Nullable Double getFrameRate() {
      return frameRate;
    }

    public void setFrameRate(@Nullable Double setterArg) {
      this.frameRate = setterArg;
    }

    private @Nullable Long bitrate;

    public @Nullable Long getBitrate() {
      return bitrate;
    }

    public void setBitrate(@Nullable Long setterArg) {
      this.bitrate = setterArg;
    }

    private @Nullable Long width;

    public @Nullable Long getWidth() {
      return width;
    }

    public void setWidth(@Nullable Long setterArg) {
      this.width = setterArg;
    }

    private @Nullable Long height;

    public @Nullable Long getHeight() {
      return height;
    }

    public void setHeight(@Nullable Long setterArg) {
      this.height = setterArg;
    }

    private @Nullable Boolean downloaded;

    public @Nullable Boolean getDownloaded() {
      return downloaded;
    }

    public void setDownloaded(@Nullable Boolean setterArg) {
      this.downloaded = setterArg;
    }

    private @NonNull Boolean isSelected;

    public @NonNull Boolean getIsSelected() {
      return isSelected;
    }

    public void setIsSelected(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isSelected\" is null.");
      }
      this.isSelected = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Track() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      Track that = (Track) o;
      return id.equals(that.id) && Objects.equals(label, that.label) && Objects.equals(language, that.language) && Objects.equals(frameRate, that.frameRate) && Objects.equals(bitrate, that.bitrate) && Objects.equals(width, that.width) && Objects.equals(height, that.height) && Objects.equals(downloaded, that.downloaded) && isSelected.equals(that.isSelected);
    }

    @Override
    public int hashCode() {
      return Objects.hash(id, label, language, frameRate, bitrate, width, height, downloaded, isSelected);
    }

    public static final class Builder {

      private @Nullable String id;

      @CanIgnoreReturnValue
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String label;

      @CanIgnoreReturnValue
      public @NonNull Builder setLabel(@Nullable String setterArg) {
        this.label = setterArg;
        return this;
      }

      private @Nullable String language;

      @CanIgnoreReturnValue
      public @NonNull Builder setLanguage(@Nullable String setterArg) {
        this.language = setterArg;
        return this;
      }

      private @Nullable Double frameRate;

      @CanIgnoreReturnValue
      public @NonNull Builder setFrameRate(@Nullable Double setterArg) {
        this.frameRate = setterArg;
        return this;
      }

      private @Nullable Long bitrate;

      @CanIgnoreReturnValue
      public @NonNull Builder setBitrate(@Nullable Long setterArg) {
        this.bitrate = setterArg;
        return this;
      }

      private @Nullable Long width;

      @CanIgnoreReturnValue
      public @NonNull Builder setWidth(@Nullable Long setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Long height;

      @CanIgnoreReturnValue
      public @NonNull Builder setHeight(@Nullable Long setterArg) {
        this.height = setterArg;
        return this;
      }

      private @Nullable Boolean downloaded;

      @CanIgnoreReturnValue
      public @NonNull Builder setDownloaded(@Nullable Boolean setterArg) {
        this.downloaded = setterArg;
        return this;
      }

      private @Nullable Boolean isSelected;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsSelected(@NonNull Boolean setterArg) {
        this.isSelected = setterArg;
        return this;
      }

      public @NonNull Track build() {
        Track pigeonReturn = new Track();
        pigeonReturn.setId(id);
        pigeonReturn.setLabel(label);
        pigeonReturn.setLanguage(language);
        pigeonReturn.setFrameRate(frameRate);
        pigeonReturn.setBitrate(bitrate);
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        pigeonReturn.setDownloaded(downloaded);
        pigeonReturn.setIsSelected(isSelected);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(9);
      toListResult.add(id);
      toListResult.add(label);
      toListResult.add(language);
      toListResult.add(frameRate);
      toListResult.add(bitrate);
      toListResult.add(width);
      toListResult.add(height);
      toListResult.add(downloaded);
      toListResult.add(isSelected);
      return toListResult;
    }

    static @NonNull Track fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      Track pigeonResult = new Track();
      Object id = pigeonVar_list.get(0);
      pigeonResult.setId((String) id);
      Object label = pigeonVar_list.get(1);
      pigeonResult.setLabel((String) label);
      Object language = pigeonVar_list.get(2);
      pigeonResult.setLanguage((String) language);
      Object frameRate = pigeonVar_list.get(3);
      pigeonResult.setFrameRate((Double) frameRate);
      Object bitrate = pigeonVar_list.get(4);
      pigeonResult.setBitrate((Long) bitrate);
      Object width = pigeonVar_list.get(5);
      pigeonResult.setWidth((Long) width);
      Object height = pigeonVar_list.get(6);
      pigeonResult.setHeight((Long) height);
      Object downloaded = pigeonVar_list.get(7);
      pigeonResult.setDownloaded((Boolean) downloaded);
      Object isSelected = pigeonVar_list.get(8);
      pigeonResult.setIsSelected((Boolean) isSelected);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PrimaryPlayerChangedEvent {
    private @Nullable String playerId;

    public @Nullable String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@Nullable String setterArg) {
      this.playerId = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      PrimaryPlayerChangedEvent that = (PrimaryPlayerChangedEvent) o;
      return Objects.equals(playerId, that.playerId);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId);
    }

    public static final class Builder {

      private @Nullable String playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@Nullable String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      public @NonNull PrimaryPlayerChangedEvent build() {
        PrimaryPlayerChangedEvent pigeonReturn = new PrimaryPlayerChangedEvent();
        pigeonReturn.setPlayerId(playerId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(1);
      toListResult.add(playerId);
      return toListResult;
    }

    static @NonNull PrimaryPlayerChangedEvent fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      PrimaryPlayerChangedEvent pigeonResult = new PrimaryPlayerChangedEvent();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PlayerStateUpdateEvent {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull PlayerStateSnapshot snapshot;

    public @NonNull PlayerStateSnapshot getSnapshot() {
      return snapshot;
    }

    public void setSnapshot(@NonNull PlayerStateSnapshot setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"snapshot\" is null.");
      }
      this.snapshot = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlayerStateUpdateEvent() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      PlayerStateUpdateEvent that = (PlayerStateUpdateEvent) o;
      return playerId.equals(that.playerId) && snapshot.equals(that.snapshot);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, snapshot);
    }

    public static final class Builder {

      private @Nullable String playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable PlayerStateSnapshot snapshot;

      @CanIgnoreReturnValue
      public @NonNull Builder setSnapshot(@NonNull PlayerStateSnapshot setterArg) {
        this.snapshot = setterArg;
        return this;
      }

      public @NonNull PlayerStateUpdateEvent build() {
        PlayerStateUpdateEvent pigeonReturn = new PlayerStateUpdateEvent();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setSnapshot(snapshot);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(playerId);
      toListResult.add(snapshot);
      return toListResult;
    }

    static @NonNull PlayerStateUpdateEvent fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      PlayerStateUpdateEvent pigeonResult = new PlayerStateUpdateEvent();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object snapshot = pigeonVar_list.get(1);
      pigeonResult.setSnapshot((PlayerStateSnapshot) snapshot);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PositionDiscontinuityEvent {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @Nullable Double playbackPositionMs;

    public @Nullable Double getPlaybackPositionMs() {
      return playbackPositionMs;
    }

    public void setPlaybackPositionMs(@Nullable Double setterArg) {
      this.playbackPositionMs = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PositionDiscontinuityEvent() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      PositionDiscontinuityEvent that = (PositionDiscontinuityEvent) o;
      return playerId.equals(that.playerId) && Objects.equals(playbackPositionMs, that.playbackPositionMs);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, playbackPositionMs);
    }

    public static final class Builder {

      private @Nullable String playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable Double playbackPositionMs;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlaybackPositionMs(@Nullable Double setterArg) {
        this.playbackPositionMs = setterArg;
        return this;
      }

      public @NonNull PositionDiscontinuityEvent build() {
        PositionDiscontinuityEvent pigeonReturn = new PositionDiscontinuityEvent();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setPlaybackPositionMs(playbackPositionMs);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(playerId);
      toListResult.add(playbackPositionMs);
      return toListResult;
    }

    static @NonNull PositionDiscontinuityEvent fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      PositionDiscontinuityEvent pigeonResult = new PositionDiscontinuityEvent();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object playbackPositionMs = pigeonVar_list.get(1);
      pigeonResult.setPlaybackPositionMs((Double) playbackPositionMs);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PlaybackStateChangedEvent {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull PlaybackState playbackState;

    public @NonNull PlaybackState getPlaybackState() {
      return playbackState;
    }

    public void setPlaybackState(@NonNull PlaybackState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playbackState\" is null.");
      }
      this.playbackState = setterArg;
    }

    private @NonNull Boolean isBuffering;

    public @NonNull Boolean getIsBuffering() {
      return isBuffering;
    }

    public void setIsBuffering(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isBuffering\" is null.");
      }
      this.isBuffering = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlaybackStateChangedEvent() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      PlaybackStateChangedEvent that = (PlaybackStateChangedEvent) o;
      return playerId.equals(that.playerId) && playbackState.equals(that.playbackState) && isBuffering.equals(that.isBuffering);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, playbackState, isBuffering);
    }

    public static final class Builder {

      private @Nullable String playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable PlaybackState playbackState;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlaybackState(@NonNull PlaybackState setterArg) {
        this.playbackState = setterArg;
        return this;
      }

      private @Nullable Boolean isBuffering;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsBuffering(@NonNull Boolean setterArg) {
        this.isBuffering = setterArg;
        return this;
      }

      public @NonNull PlaybackStateChangedEvent build() {
        PlaybackStateChangedEvent pigeonReturn = new PlaybackStateChangedEvent();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setPlaybackState(playbackState);
        pigeonReturn.setIsBuffering(isBuffering);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(3);
      toListResult.add(playerId);
      toListResult.add(playbackState);
      toListResult.add(isBuffering);
      return toListResult;
    }

    static @NonNull PlaybackStateChangedEvent fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      PlaybackStateChangedEvent pigeonResult = new PlaybackStateChangedEvent();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object playbackState = pigeonVar_list.get(1);
      pigeonResult.setPlaybackState((PlaybackState) playbackState);
      Object isBuffering = pigeonVar_list.get(2);
      pigeonResult.setIsBuffering((Boolean) isBuffering);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PlaybackEndedEvent {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @Nullable MediaItem mediaItem;

    public @Nullable MediaItem getMediaItem() {
      return mediaItem;
    }

    public void setMediaItem(@Nullable MediaItem setterArg) {
      this.mediaItem = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlaybackEndedEvent() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      PlaybackEndedEvent that = (PlaybackEndedEvent) o;
      return playerId.equals(that.playerId) && Objects.equals(mediaItem, that.mediaItem);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, mediaItem);
    }

    public static final class Builder {

      private @Nullable String playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable MediaItem mediaItem;

      @CanIgnoreReturnValue
      public @NonNull Builder setMediaItem(@Nullable MediaItem setterArg) {
        this.mediaItem = setterArg;
        return this;
      }

      public @NonNull PlaybackEndedEvent build() {
        PlaybackEndedEvent pigeonReturn = new PlaybackEndedEvent();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setMediaItem(mediaItem);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(playerId);
      toListResult.add(mediaItem);
      return toListResult;
    }

    static @NonNull PlaybackEndedEvent fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      PlaybackEndedEvent pigeonResult = new PlaybackEndedEvent();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object mediaItem = pigeonVar_list.get(1);
      pigeonResult.setMediaItem((MediaItem) mediaItem);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PictureInPictureModeChangedEvent {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @NonNull Boolean isInPipMode;

    public @NonNull Boolean getIsInPipMode() {
      return isInPipMode;
    }

    public void setIsInPipMode(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isInPipMode\" is null.");
      }
      this.isInPipMode = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PictureInPictureModeChangedEvent() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      PictureInPictureModeChangedEvent that = (PictureInPictureModeChangedEvent) o;
      return playerId.equals(that.playerId) && isInPipMode.equals(that.isInPipMode);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, isInPipMode);
    }

    public static final class Builder {

      private @Nullable String playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable Boolean isInPipMode;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsInPipMode(@NonNull Boolean setterArg) {
        this.isInPipMode = setterArg;
        return this;
      }

      public @NonNull PictureInPictureModeChangedEvent build() {
        PictureInPictureModeChangedEvent pigeonReturn = new PictureInPictureModeChangedEvent();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setIsInPipMode(isInPipMode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(playerId);
      toListResult.add(isInPipMode);
      return toListResult;
    }

    static @NonNull PictureInPictureModeChangedEvent fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      PictureInPictureModeChangedEvent pigeonResult = new PictureInPictureModeChangedEvent();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object isInPipMode = pigeonVar_list.get(1);
      pigeonResult.setIsInPipMode((Boolean) isInPipMode);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MediaItemTransitionEvent {
    private @NonNull String playerId;

    public @NonNull String getPlayerId() {
      return playerId;
    }

    public void setPlayerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"playerId\" is null.");
      }
      this.playerId = setterArg;
    }

    private @Nullable MediaItem mediaItem;

    public @Nullable MediaItem getMediaItem() {
      return mediaItem;
    }

    public void setMediaItem(@Nullable MediaItem setterArg) {
      this.mediaItem = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    MediaItemTransitionEvent() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      MediaItemTransitionEvent that = (MediaItemTransitionEvent) o;
      return playerId.equals(that.playerId) && Objects.equals(mediaItem, that.mediaItem);
    }

    @Override
    public int hashCode() {
      return Objects.hash(playerId, mediaItem);
    }

    public static final class Builder {

      private @Nullable String playerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPlayerId(@NonNull String setterArg) {
        this.playerId = setterArg;
        return this;
      }

      private @Nullable MediaItem mediaItem;

      @CanIgnoreReturnValue
      public @NonNull Builder setMediaItem(@Nullable MediaItem setterArg) {
        this.mediaItem = setterArg;
        return this;
      }

      public @NonNull MediaItemTransitionEvent build() {
        MediaItemTransitionEvent pigeonReturn = new MediaItemTransitionEvent();
        pigeonReturn.setPlayerId(playerId);
        pigeonReturn.setMediaItem(mediaItem);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(playerId);
      toListResult.add(mediaItem);
      return toListResult;
    }

    static @NonNull MediaItemTransitionEvent fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      MediaItemTransitionEvent pigeonResult = new MediaItemTransitionEvent();
      Object playerId = pigeonVar_list.get(0);
      pigeonResult.setPlayerId((String) playerId);
      Object mediaItem = pigeonVar_list.get(1);
      pigeonResult.setMediaItem((MediaItem) mediaItem);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129: {
          Object value = readValue(buffer);
          return value == null ? null : BufferMode.values()[((Long) value).intValue()];
        }
        case (byte) 130: {
          Object value = readValue(buffer);
          return value == null ? null : RepeatMode.values()[((Long) value).intValue()];
        }
        case (byte) 131: {
          Object value = readValue(buffer);
          return value == null ? null : PlaybackState.values()[((Long) value).intValue()];
        }
        case (byte) 132: {
          Object value = readValue(buffer);
          return value == null ? null : CastConnectionState.values()[((Long) value).intValue()];
        }
        case (byte) 133: {
          Object value = readValue(buffer);
          return value == null ? null : TrackType.values()[((Long) value).intValue()];
        }
        case (byte) 134:
          return NpawConfig.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return AppConfig.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return User.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return SetUrlArgs.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return MediaItem.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return MediaMetadata.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return PlayerStateSnapshot.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return PlayerError.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return VideoSize.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 143:
          return ChromecastState.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 144:
          return MediaInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 145:
          return PlayerTracksSnapshot.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 146:
          return Track.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 147:
          return PrimaryPlayerChangedEvent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 148:
          return PlayerStateUpdateEvent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 149:
          return PositionDiscontinuityEvent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 150:
          return PlaybackStateChangedEvent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 151:
          return PlaybackEndedEvent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 152:
          return PictureInPictureModeChangedEvent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 153:
          return MediaItemTransitionEvent.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof BufferMode) {
        stream.write(129);
        writeValue(stream, value == null ? null : ((BufferMode) value).index);
      } else if (value instanceof RepeatMode) {
        stream.write(130);
        writeValue(stream, value == null ? null : ((RepeatMode) value).index);
      } else if (value instanceof PlaybackState) {
        stream.write(131);
        writeValue(stream, value == null ? null : ((PlaybackState) value).index);
      } else if (value instanceof CastConnectionState) {
        stream.write(132);
        writeValue(stream, value == null ? null : ((CastConnectionState) value).index);
      } else if (value instanceof TrackType) {
        stream.write(133);
        writeValue(stream, value == null ? null : ((TrackType) value).index);
      } else if (value instanceof NpawConfig) {
        stream.write(134);
        writeValue(stream, ((NpawConfig) value).toList());
      } else if (value instanceof AppConfig) {
        stream.write(135);
        writeValue(stream, ((AppConfig) value).toList());
      } else if (value instanceof User) {
        stream.write(136);
        writeValue(stream, ((User) value).toList());
      } else if (value instanceof SetUrlArgs) {
        stream.write(137);
        writeValue(stream, ((SetUrlArgs) value).toList());
      } else if (value instanceof MediaItem) {
        stream.write(138);
        writeValue(stream, ((MediaItem) value).toList());
      } else if (value instanceof MediaMetadata) {
        stream.write(139);
        writeValue(stream, ((MediaMetadata) value).toList());
      } else if (value instanceof PlayerStateSnapshot) {
        stream.write(140);
        writeValue(stream, ((PlayerStateSnapshot) value).toList());
      } else if (value instanceof PlayerError) {
        stream.write(141);
        writeValue(stream, ((PlayerError) value).toList());
      } else if (value instanceof VideoSize) {
        stream.write(142);
        writeValue(stream, ((VideoSize) value).toList());
      } else if (value instanceof ChromecastState) {
        stream.write(143);
        writeValue(stream, ((ChromecastState) value).toList());
      } else if (value instanceof MediaInfo) {
        stream.write(144);
        writeValue(stream, ((MediaInfo) value).toList());
      } else if (value instanceof PlayerTracksSnapshot) {
        stream.write(145);
        writeValue(stream, ((PlayerTracksSnapshot) value).toList());
      } else if (value instanceof Track) {
        stream.write(146);
        writeValue(stream, ((Track) value).toList());
      } else if (value instanceof PrimaryPlayerChangedEvent) {
        stream.write(147);
        writeValue(stream, ((PrimaryPlayerChangedEvent) value).toList());
      } else if (value instanceof PlayerStateUpdateEvent) {
        stream.write(148);
        writeValue(stream, ((PlayerStateUpdateEvent) value).toList());
      } else if (value instanceof PositionDiscontinuityEvent) {
        stream.write(149);
        writeValue(stream, ((PositionDiscontinuityEvent) value).toList());
      } else if (value instanceof PlaybackStateChangedEvent) {
        stream.write(150);
        writeValue(stream, ((PlaybackStateChangedEvent) value).toList());
      } else if (value instanceof PlaybackEndedEvent) {
        stream.write(151);
        writeValue(stream, ((PlaybackEndedEvent) value).toList());
      } else if (value instanceof PictureInPictureModeChangedEvent) {
        stream.write(152);
        writeValue(stream, ((PictureInPictureModeChangedEvent) value).toList());
      } else if (value instanceof MediaItemTransitionEvent) {
        stream.write(153);
        writeValue(stream, ((MediaItemTransitionEvent) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }


  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /**
   * The main interface, used by the flutter side to control the player.
   *
   * Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface PlaybackPlatformPigeon {

    void attach(@NonNull VoidResult result);

    void newPlayer(@Nullable BufferMode bufferMode, @Nullable Boolean disableNpaw, @NonNull Result<String> result);

    void createVideoTexture(@NonNull Result<Long> result);

    void disposeVideoTexture(@NonNull Long textureId, @NonNull Result<Boolean> result);

    void switchToVideoTexture(@NonNull String playerId, @NonNull Long textureId, @NonNull Result<Long> result);

    void disposePlayer(@NonNull String playerId, @NonNull Result<Boolean> result);

    void replaceCurrentMediaItem(@NonNull String playerId, @NonNull MediaItem mediaItem, @Nullable Boolean playbackPositionFromPrimary, @Nullable Boolean autoplay, @NonNull VoidResult result);

    void setPlayerViewVisibility(@NonNull Long viewId, @NonNull Boolean visible);

    void setPrimary(@NonNull String id, @NonNull VoidResult result);

    void play(@NonNull String playerId);

    void seekTo(@NonNull String playerId, @NonNull Double positionMs, @NonNull VoidResult result);

    void pause(@NonNull String playerId);

    void stop(@NonNull String playerId, @NonNull Boolean reset);

    void setVolume(@NonNull String playerId, @NonNull Double volume, @NonNull VoidResult result);

    void setRepeatMode(@NonNull String playerId, @NonNull RepeatMode repeatMode, @NonNull VoidResult result);

    void setSelectedTrack(@NonNull String playerId, @NonNull TrackType type, @Nullable String trackId, @NonNull VoidResult result);

    void setPlaybackSpeed(@NonNull String playerId, @NonNull Double speed, @NonNull VoidResult result);

    void exitFullscreen(@NonNull String playerId);

    void enterFullscreen(@NonNull String playerId);

    void setMixWithOthers(@NonNull String playerId, @NonNull Boolean mixWithOthers, @NonNull VoidResult result);

    void setNpawConfig(@Nullable NpawConfig config);

    void setAppConfig(@Nullable AppConfig config);

    void getTracks(@Nullable String playerId, @NonNull NullableResult<PlayerTracksSnapshot> result);

    void getPlayerState(@Nullable String playerId, @NonNull NullableResult<PlayerStateSnapshot> result);

    void getChromecastState(@NonNull NullableResult<ChromecastState> result);

    void openExpandedCastController();

    void openCastDialog();

    void fetchMediaInfo(@NonNull String url, @Nullable String mimeType, @NonNull Result<MediaInfo> result);

    void getAndroidPerformanceClass(@NonNull Result<Long> result);

    /** The codec used by PlaybackPlatformPigeon. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `PlaybackPlatformPigeon` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable PlaybackPlatformPigeon api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable PlaybackPlatformPigeon api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.attach" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.attach(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.newPlayer" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                BufferMode bufferModeArg = (BufferMode) args.get(0);
                Boolean disableNpawArg = (Boolean) args.get(1);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.newPlayer(bufferModeArg, disableNpawArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.createVideoTexture" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.createVideoTexture(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.disposeVideoTexture" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long textureIdArg = (Long) args.get(0);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.disposeVideoTexture(textureIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.switchToVideoTexture" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                Long textureIdArg = (Long) args.get(1);
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.switchToVideoTexture(playerIdArg, textureIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.disposePlayer" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.disposePlayer(playerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.replaceCurrentMediaItem" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                MediaItem mediaItemArg = (MediaItem) args.get(1);
                Boolean playbackPositionFromPrimaryArg = (Boolean) args.get(2);
                Boolean autoplayArg = (Boolean) args.get(3);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.replaceCurrentMediaItem(playerIdArg, mediaItemArg, playbackPositionFromPrimaryArg, autoplayArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPlayerViewVisibility" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long viewIdArg = (Long) args.get(0);
                Boolean visibleArg = (Boolean) args.get(1);
                try {
                  api.setPlayerViewVisibility(viewIdArg, visibleArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPrimary" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String idArg = (String) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setPrimary(idArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.play" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                try {
                  api.play(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.seekTo" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                Double positionMsArg = (Double) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.seekTo(playerIdArg, positionMsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.pause" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                try {
                  api.pause(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.stop" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                Boolean resetArg = (Boolean) args.get(1);
                try {
                  api.stop(playerIdArg, resetArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setVolume" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                Double volumeArg = (Double) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setVolume(playerIdArg, volumeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setRepeatMode" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                RepeatMode repeatModeArg = (RepeatMode) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setRepeatMode(playerIdArg, repeatModeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setSelectedTrack" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                TrackType typeArg = (TrackType) args.get(1);
                String trackIdArg = (String) args.get(2);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setSelectedTrack(playerIdArg, typeArg, trackIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setPlaybackSpeed" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                Double speedArg = (Double) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setPlaybackSpeed(playerIdArg, speedArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.exitFullscreen" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                try {
                  api.exitFullscreen(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.enterFullscreen" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                try {
                  api.enterFullscreen(playerIdArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setMixWithOthers" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                Boolean mixWithOthersArg = (Boolean) args.get(1);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setMixWithOthers(playerIdArg, mixWithOthersArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setNpawConfig" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                NpawConfig configArg = (NpawConfig) args.get(0);
                try {
                  api.setNpawConfig(configArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.setAppConfig" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AppConfig configArg = (AppConfig) args.get(0);
                try {
                  api.setAppConfig(configArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getTracks" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                NullableResult<PlayerTracksSnapshot> resultCallback =
                    new NullableResult<PlayerTracksSnapshot>() {
                      public void success(PlayerTracksSnapshot result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getTracks(playerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getPlayerState" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String playerIdArg = (String) args.get(0);
                NullableResult<PlayerStateSnapshot> resultCallback =
                    new NullableResult<PlayerStateSnapshot>() {
                      public void success(PlayerStateSnapshot result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getPlayerState(playerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getChromecastState" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                NullableResult<ChromecastState> resultCallback =
                    new NullableResult<ChromecastState>() {
                      public void success(ChromecastState result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getChromecastState(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.openExpandedCastController" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.openExpandedCastController();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.openCastDialog" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.openCastDialog();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.fetchMediaInfo" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String urlArg = (String) args.get(0);
                String mimeTypeArg = (String) args.get(1);
                Result<MediaInfo> resultCallback =
                    new Result<MediaInfo>() {
                      public void success(MediaInfo result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.fetchMediaInfo(urlArg, mimeTypeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.bccm_player.PlaybackPlatformPigeon.getAndroidPerformanceClass" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getAndroidPerformanceClass(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class QueueManagerPigeon {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public QueueManagerPigeon(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }
    public QueueManagerPigeon(@NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /**
     * Public interface for sending reply.
     * The codec used by QueueManagerPigeon.
     */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    public void handlePlaybackEnded(@NonNull String playerIdArg, @Nullable MediaItem currentArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.bccm_player.QueueManagerPigeon.handlePlaybackEnded" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Arrays.asList(playerIdArg, currentArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void skipToNext(@NonNull String playerIdArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.bccm_player.QueueManagerPigeon.skipToNext" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(playerIdArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void skipToPrevious(@NonNull String playerIdArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.bccm_player.QueueManagerPigeon.skipToPrevious" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(playerIdArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
  /**
   * /////////////// Playback Listener
   *
   * Generated class from Pigeon that represents Flutter messages that can be called from Java.
   */
  public static class PlaybackListenerPigeon {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public PlaybackListenerPigeon(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }
    public PlaybackListenerPigeon(@NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /**
     * Public interface for sending reply.
     * The codec used by PlaybackListenerPigeon.
     */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    public void onPrimaryPlayerChanged(@NonNull PrimaryPlayerChangedEvent eventArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPrimaryPlayerChanged" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(eventArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onPositionDiscontinuity(@NonNull PositionDiscontinuityEvent eventArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPositionDiscontinuity" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(eventArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onPlayerStateUpdate(@NonNull PlayerStateUpdateEvent eventArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlayerStateUpdate" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(eventArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onPlaybackStateChanged(@NonNull PlaybackStateChangedEvent eventArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackStateChanged" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(eventArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onPlaybackEnded(@NonNull PlaybackEndedEvent eventArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPlaybackEnded" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(eventArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onMediaItemTransition(@NonNull MediaItemTransitionEvent eventArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onMediaItemTransition" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(eventArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onPictureInPictureModeChanged(@NonNull PictureInPictureModeChangedEvent eventArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.bccm_player.PlaybackListenerPigeon.onPictureInPictureModeChanged" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(eventArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
